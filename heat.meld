
type route edge(node, node, float).
type linear heat(node, float).
type linear heatchanged(node, float).
type linear neighborchanged(node, node, float, float).
type linear delta(node, float, float).
type linear count(node, int).
type inbound(node, int).

prio edge < heat.
prio edge < heatchanged.
prio edge < delta.
prio edge < count.
prio edge < inbound.
prio heatchanged < heat.
prio neighborchanged < heat.
prio neighborchanged < heatchanged.
prio neighborchanged < delta.

const startingheat = 1.0.

!edge(@1, @2, 0.6).
!edge(@3, @4, 0.5).
!edge(@1, @3, 0.5).
!edge(@2, @4, 0.5).

!inbound(@1, 2).
!inbound(@2, 2).
!inbound(@3, 2).
!inbound(@4, 2).

!edge(A, B, W) -o !edge(B, A, W).

heat(A, startingheat).
heatchanged(A, 0.0).
delta(A, 0.0, 0.0).
count(A, 0).

heatchanged(A, O),
$heat(A, V),
!inbound(A, T),
$count(A, C)
   -o {B, W | !edge(A, B, W) | neighborchanged(B, A, V / float(T), O / float(T))}.

neighborchanged(A, B, V, O),
!edge(A, B, W),
delta(A, P1, P2)
   -o delta(A, P1 + V * W, P2 + O * W).

delta(A, Plus, Minus),
heat(A, V),
count(A, C),
if (Plus - Minus) >= 0.0 then (Plus - Minus) else -1.0 * (Plus - Minus) end > 0.02
   -o heatchanged(A, V), heat(A, V + Plus - Minus), count(A, C + 1), delta(A, 0.0, 0.0).

