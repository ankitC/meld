const unsigned char meld_prog[] = {0x4, 0x5, 0x10, 0x1B, 0x24, 0x2D, 0x0, 0x8, 0x2, 0x0, 0x2, 0x0, 0x24, 0x0, 0x54, 0x4, 0x4B, 0x0, 0x8, 0x2, 0x0, 0x2, 0x0, 0x24, 0x0, 0x54, 0x4, 0x6A, 0x0, 0x4, 0x1, 0x90, 0x1, 0x0, 0x14, 0x0, 0x8C, 0x0, 0x4, 0x4, 0x0, 0x1, 0x0, 0x14, 0x0, 0x37, 0xE0, 0x30, 0xE2, 0x30, 0xA1, 0x1, 0x0, 0x40, 0x63, 0x38, 0x82, 0x0, 0x3, 0x38, 0x42, 0x1, 0x3, 0x30, 0xA4, 0x1, 0x0, 0x8, 0x64, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x37, 0xE0, 0xA0, 0x3, 0x1C, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0x40, 0xA2, 0x30, 0x82, 0x0, 0x1, 0x0, 0x2, 0x30, 0xA3, 0x1, 0x0, 0x8, 0x43, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x37, 0xE0, 0xA0, 0x3, 0x1F, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0x20, 0x2, 0x2, 0x0, 0x0, 0x38, 0xA2, 0x40, 0xE3, 0x38, 0x82, 0x0, 0x3, 0x8, 0x63, 0x1, 0x0, 0x0, 0x0, 0x0, 0x81, 0x0, 0x1, 0x0, 0x37, 0xE0, 0xA0, 0x1, 0x1C, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0x40, 0xA2, 0x30, 0x82, 0x0, 0x0, 0x0, 0x2, 0x30, 0xA3, 0x1, 0x1, 0x8, 0x43, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x37, 0xE0, 0xA0, 0x2, 0x1F, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0x20, 0x2, 0x2, 0x0, 0x1, 0x38, 0xA2, 0x40, 0xE3, 0x38, 0x82, 0x0, 0x3, 0x8, 0x63, 0x1, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0x1, 0x0, };


char *tuple_names[] = {"edge", "____egde", "adjValues", "value", };

#include "extern_functions.h"
unsigned int (*extern_functs[])() = {(unsigned int (*)())&bpfn};

int extern_functs_args[] = {1};



/*
PROCESS edge:
MOVE tuple TO reg 0
MOVE host_id TO reg 2
MOVE 0.1 TO reg 1
ALLOC ____egde TO reg 3
MOVE reg 2 TO 3.0
MOVE reg 1 TO 3.1
MOVE 0.1 TO reg 4
SEND reg 3 TO reg 4 IN 0ms
RETURN


PROCESS ____egde:
MOVE tuple TO reg 0
ITERATE OVER value MATCHING 
MOVE tuple TO reg 1
ALLOC adjValues TO reg 2
MOVE 1.0 TO 2.0
MOVE 0.1 TO reg 3
SEND reg 2 TO reg 3 IN 0ms
NEXT
RETURN


PROCESS adjValues (set_union_float 0) :
MOVE tuple TO reg 0
ITERATE OVER value MATCHING 
MOVE tuple TO reg 1
CALL 0 2 = (0.0)
MOVE reg 2 TO reg 2
ALLOC value TO reg 3
MOVE reg 2 TO 3.0
SEND reg 3 TO reg 3 IN 0ms
REMOVE reg 1
RETURN
NEXT
RETURN


PROCESS value:
MOVE tuple TO reg 0
ITERATE OVER ____egde MATCHING 
MOVE tuple TO reg 1
ALLOC adjValues TO reg 2
MOVE 0.0 TO 2.0
MOVE 1.1 TO reg 3
SEND reg 2 TO reg 3 IN 0ms
NEXT
MOVE tuple TO reg 0
ITERATE OVER adjValues MATCHING 
MOVE tuple TO reg 1
CALL 0 2 = (1.0)
MOVE reg 2 TO reg 2
ALLOC value TO reg 3
MOVE reg 2 TO 3.0
SEND reg 3 TO reg 3 IN 0ms
REMOVE reg 0
RETURN
NEXT
RETURN


*/

