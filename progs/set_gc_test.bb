const unsigned char meld_prog[] = {0x9, 0xA, 0x12, 0x1B, 0x23, 0x2C, 0x36, 0x40, 0x4A, 0x53, 0x5C, 0x0, 0x4, 0x0, 0x1, 0x1, 0x0, 0x2, 0x93, 0x0, 0x4, 0x0, 0x2, 0x2, 0x0, 0x2, 0x0, 0xE4, 0x0, 0x0, 0x0, 0x3, 0x1, 0x0, 0x2, 0xE5, 0x0, 0x2, 0x0, 0x4, 0x2, 0x0, 0x2, 0x2, 0xE6, 0x0, 0x0, 0x0, 0x5, 0x3, 0x0, 0x2, 0x8, 0x0, 0xE7, 0x0, 0x22, 0x0, 0x6, 0x3, 0x0, 0x2, 0x2, 0x5, 0xB, 0x1, 0x22, 0x0, 0x7, 0x3, 0x0, 0x2, 0x2, 0x5, 0xC, 0x1, 0x4, 0x0, 0x8, 0x2, 0x0, 0x2, 0x6, 0x64, 0x1, 0x4, 0x0, 0x9, 0x2, 0x0, 0x2, 0x0, 0x37, 0xE0, 0x30, 0x62, 0x0, 0x0, 0x0, 0x0, 0x30, 0x61, 0x1, 0x0, 0x0, 0x0, 0x40, 0x63, 0x30, 0x82, 0x0, 0x0, 0x0, 0x3, 0x38, 0x82, 0x1, 0x3, 0x8, 0x63, 0x1, 0x0, 0x0, 0x0, 0x0, 0x40, 0x63, 0x30, 0x82, 0x0, 0x0, 0x0, 0x3, 0x38, 0x42, 0x1, 0x3, 0x8, 0x63, 0x1, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x37, 0xE0, 0x30, 0x61, 0x64, 0x0, 0x0, 0x0, 0xC2, 0x4, 0x43, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x62, 0x18, 0x0, 0x42, 0x23, 0x30, 0x82, 0x0, 0x0, 0x0, 0x3, 0x38, 0x42, 0x1, 0x3, 0x8, 0x63, 0x1, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0x37, 0xE0, 0x20, 0x21, 0x38, 0x61, 0xC2, 0x4, 0x43, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x62, 0x18, 0x0, 0x41, 0xE3, 0x30, 0x82, 0x0, 0x0, 0x0, 0x3, 0x38, 0x42, 0x1, 0x3, 0x8, 0x63, 0x1, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x37, 0xE0, 0x31, 0x21, 0x2, 0x0, 0x41, 0xA2, 0x30, 0x82, 0x1, 0x0, 0x0, 0x2, 0x30, 0x82, 0x0, 0x0, 0x1, 0x2, 0x38, 0x42, 0x2, 0x2, 0x30, 0xA3, 0x2, 0x0, 0x8, 0x43, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x37, 0xE0, 0xA0, 0x8, 0x55, 0x0, 0x0, 0x42, 0x0, 0x0, 0x37, 0xE1, 0xC2, 0x4, 0x71, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x38, 0xE3, 0x20, 0x2, 0x2, 0x1, 0x0, 0x2, 0x1, 0x1, 0x38, 0xA2, 0xC2, 0x4, 0x89, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x64, 0x2C, 0x0, 0x42, 0x25, 0x30, 0x82, 0x0, 0x0, 0x0, 0x5, 0x38, 0xC2, 0x1, 0x5, 0x8, 0xA5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x41, 0xE5, 0x30, 0x82, 0x0, 0x0, 0x0, 0x5, 0x38, 0x82, 0x1, 0x5, 0x8, 0xA5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x80, 0x81, 0x0, 0x1, 0x0, 0x37, 0xE0, 0xA0, 0x7, 0x55, 0x0, 0x0, 0x42, 0x0, 0x0, 0x37, 0xE1, 0xC2, 0x4, 0x71, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x38, 0xE3, 0x20, 0x2, 0x2, 0x1, 0x1, 0x2, 0x1, 0x0, 0x38, 0xA2, 0xC2, 0x4, 0x89, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x64, 0x2C, 0x0, 0x42, 0x25, 0x30, 0x82, 0x0, 0x0, 0x0, 0x5, 0x38, 0xC2, 0x1, 0x5, 0x8, 0xA5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x41, 0xE5, 0x30, 0x82, 0x0, 0x0, 0x0, 0x5, 0x38, 0x82, 0x1, 0x5, 0x8, 0xA5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x80, 0x81, 0x0, 0x1, 0x0, };


char *tuple_names[] = {"_init", "__init", "terminate", "colocated", "proved", "edge", "____egde", "fact", "total", };

#include "extern_functions.h"
Register (*extern_functs[])() = {(Register (*)())&set_insert_int, (Register (*)())&empty_set};

int extern_functs_args[] = {2, 0};



/*
PROCESS _init:
MOVE tuple TO reg 0
MOVE 0 TO reg 2
MOVE 1 TO reg 1
ALLOC __init TO reg 3
MOVE 0.0 TO 3.0
MOVE reg 2 TO 3.1
SEND reg 3 TO reg 3 IN 0ms
ALLOC __init TO reg 3
MOVE 0.0 TO 3.0
MOVE reg 1 TO 3.1
SEND reg 3 TO reg 3 IN 0ms
REMOVE reg 0
RETURN
RETURN


PROCESS __init:
MOVE tuple TO reg 0
MOVE 100 TO reg 1
SET reg 2 TO 0.1 INT EQUAL 0
IF (2) THEN
ALLOC total TO reg 3
MOVE 0.0 TO 3.0
MOVE reg 1 TO 3.1
SEND reg 3 TO reg 3 IN 0ms
REMOVE reg 0
RETURN
ENDIF
MOVE tuple TO reg 0
CALL 1 1 = ()
MOVE reg 1 TO reg 1
SET reg 2 TO 0.1 INT EQUAL 1
IF (2) THEN
ALLOC fact TO reg 3
MOVE 0.0 TO 3.0
MOVE reg 1 TO 3.1
SEND reg 3 TO reg 3 IN 0ms
REMOVE reg 0
RETURN
ENDIF
RETURN


PROCESS terminate:
RETURN


PROCESS colocated:
RETURN


PROCESS proved:
RETURN


PROCESS edge:
MOVE tuple TO reg 0
MOVE reverse[0.2] TO reg 1
ALLOC ____egde TO reg 2
MOVE 0.1 TO 2.0
MOVE 0.0 TO 2.1
MOVE reg 1 TO 2.2
MOVE 0.2 TO reg 3
SEND reg 2 TO reg 3 IN 0ms
RETURN


PROCESS ____egde:
RETURN


PROCESS fact:
MOVE tuple TO reg 0
ITERATE OVER total MATCHING 
  (match).0=0.0
MOVE tuple TO reg 1
SET reg 3 TO 1.1 INT_MINUS 1
MOVE reg 3 TO reg 3
CALL 0 2 = (0.1, 1.1)
MOVE reg 2 TO reg 2
SET reg 4 TO 1.1 INT GREATER THAN 0
IF (4) THEN
ALLOC total TO reg 5
MOVE 0.0 TO 5.0
MOVE reg 3 TO 5.1
SEND reg 5 TO reg 5 IN 0ms
ALLOC fact TO reg 5
MOVE 0.0 TO 5.0
MOVE reg 2 TO 5.1
SEND reg 5 TO reg 5 IN 0ms
REMOVE reg 0
REMOVE reg 1
RETURN
ENDIF
NEXT
RETURN


PROCESS total:
MOVE tuple TO reg 0
ITERATE OVER fact MATCHING 
  (match).0=0.0
MOVE tuple TO reg 1
SET reg 3 TO 0.1 INT_MINUS 1
MOVE reg 3 TO reg 3
CALL 0 2 = (1.1, 0.1)
MOVE reg 2 TO reg 2
SET reg 4 TO 0.1 INT GREATER THAN 0
IF (4) THEN
ALLOC total TO reg 5
MOVE 0.0 TO 5.0
MOVE reg 3 TO 5.1
SEND reg 5 TO reg 5 IN 0ms
ALLOC fact TO reg 5
MOVE 0.0 TO 5.0
MOVE reg 2 TO 5.1
SEND reg 5 TO reg 5 IN 0ms
REMOVE reg 0
REMOVE reg 1
RETURN
ENDIF
NEXT
RETURN


*/

