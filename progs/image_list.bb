const unsigned char meld_prog[] = {0xB, 0xC, 0x13, 0x1B, 0x24, 0x2D, 0x36, 0x3E, 0x49, 0x52, 0x5B, 0x65, 0x6F, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x70, 0x0, 0x2, 0x0, 0x2, 0x1, 0x0, 0x2, 0x71, 0x0, 0x0, 0x0, 0x3, 0x2, 0x0, 0x8, 0x0, 0x72, 0x0, 0x22, 0x0, 0x4, 0x2, 0x0, 0x2, 0x5, 0x4F, 0x1, 0x22, 0x0, 0x5, 0x2, 0x0, 0x2, 0x5, 0x50, 0x1, 0x2, 0x0, 0x6, 0x1, 0x0, 0x4, 0x7C, 0x1, 0x0, 0x0, 0x7, 0x4, 0x0, 0x5, 0x2, 0x0, 0x4, 0xC3, 0x1, 0x1, 0xB1, 0x8, 0x2, 0x0, 0x0, 0x4, 0xEF, 0x1, 0x0, 0x0, 0x9, 0x2, 0x0, 0x0, 0x4, 0x36, 0x2, 0x0, 0x0, 0xA, 0x3, 0x0, 0x2, 0x0, 0x4, 0x89, 0x2, 0x0, 0x0, 0xB, 0x3, 0x0, 0x2, 0x0, 0x4, 0x0, 0x0, 0x0, 0x37, 0xE0, 0x31, 0x22, 0x1, 0x0, 0x30, 0xE1, 0x41, 0x23, 0x38, 0x42, 0x0, 0x3, 0x38, 0x82, 0x1, 0x3, 0x30, 0xA4, 0x1, 0x0, 0x8, 0x64, 0x1, 0x0, 0x0, 0x0, 0x0, 0x37, 0xE0, 0xA0, 0xA, 0x39, 0x0, 0x0, 0x42, 0x0, 0x0, 0x37, 0xE1, 0xC2, 0x4, 0x4F, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0x38, 0xA3, 0xC2, 0x4, 0x87, 0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x64, 0x1A, 0x0, 0x41, 0xE5, 0x38, 0xC2, 0x0, 0x5, 0x30, 0x82, 0x2, 0x1, 0x1, 0x5, 0x30, 0xA6, 0x1, 0x0, 0x8, 0xA6, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x37, 0xE0, 0xA0, 0xA, 0x30, 0x0, 0x0, 0x42, 0x0, 0x0, 0x37, 0xE1, 0x30, 0xE2, 0x41, 0xA3, 0x30, 0x82, 0x1, 0x0, 0x0, 0x3, 0x38, 0x82, 0x1, 0x3, 0x30, 0x82, 0x1, 0x1, 0x2, 0x3, 0x30, 0x82, 0x2, 0x1, 0x3, 0x3, 0x30, 0xA4, 0x1, 0x0, 0x8, 0x64, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x37, 0xE0, 0xA0, 0xA, 0x50, 0x0, 0x0, 0x42, 0x0, 0x0, 0x37, 0xE1, 0xA0, 0x9, 0x45, 0x0, 0x0, 0x42, 0x0, 0x0, 0x37, 0xE2, 0x20, 0x63, 0x2, 0x2, 0x2, 0x20, 0x23, 0x23, 0x20, 0x83, 0x23, 0x2, 0x2, 0x1, 0x38, 0xE4, 0xC2, 0x4, 0xB1, 0x1, 0x2, 0x1, 0x0, 0x0, 0x0, 0xC2, 0x94, 0xC3, 0x1, 0x1, 0x66, 0x1C, 0x0, 0x42, 0xA7, 0x30, 0x82, 0x0, 0x0, 0x0, 0x7, 0x30, 0x82, 0x1, 0x2, 0x1, 0x7, 0x39, 0x2, 0x2, 0x7, 0x8, 0xE7, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x0, 0x0, 0x37, 0xE0, 0xA0, 0x7, 0x29, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0x20, 0x2, 0x2, 0x1, 0x1, 0x2, 0x0, 0x0, 0x20, 0x22, 0x22, 0x38, 0xA3, 0x42, 0x24, 0x30, 0x82, 0x0, 0x1, 0x0, 0x4, 0x38, 0xC2, 0x1, 0x4, 0x8, 0x84, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x37, 0xE0, 0xA0, 0x8, 0x44, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0x31, 0x26, 0x0, 0x0, 0x20, 0x42, 0x2, 0x1, 0x1, 0x2, 0x3, 0x0, 0x20, 0x22, 0x22, 0x38, 0xA3, 0xC2, 0x4, 0x91, 0x0, 0x1, 0x1, 0x0, 0x0, 0x0, 0xC2, 0x90, 0xA3, 0x2, 0x0, 0x65, 0x1C, 0x0, 0x42, 0x67, 0x30, 0x82, 0x1, 0x0, 0x0, 0x7, 0x30, 0x82, 0x0, 0x1, 0x1, 0x7, 0x38, 0xC2, 0x2, 0x7, 0x8, 0xE7, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x37, 0xE0, 0xA0, 0x5, 0x29, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0x20, 0x2, 0x2, 0x1, 0x0, 0x2, 0x0, 0x1, 0x20, 0x22, 0x22, 0x38, 0xA3, 0x42, 0x24, 0x30, 0x82, 0x0, 0x0, 0x0, 0x4, 0x38, 0xC2, 0x1, 0x4, 0x8, 0x84, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x37, 0xE0, 0xA0, 0x6, 0x44, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0x31, 0x26, 0x0, 0x1, 0x20, 0x42, 0x2, 0x1, 0x0, 0x2, 0x3, 0x1, 0x20, 0x22, 0x22, 0x38, 0xA3, 0xC2, 0x4, 0x91, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xC2, 0x90, 0xA3, 0x2, 0x1, 0x65, 0x1C, 0x0, 0x42, 0x67, 0x30, 0x82, 0x1, 0x1, 0x0, 0x7, 0x30, 0x82, 0x0, 0x0, 0x1, 0x7, 0x38, 0xC2, 0x2, 0x7, 0x8, 0xE7, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x37, 0xE0, 0xA0, 0xA, 0x50, 0x0, 0x0, 0x42, 0x0, 0x0, 0x37, 0xE1, 0xA0, 0x3, 0x45, 0x0, 0x0, 0x42, 0x0, 0x0, 0x37, 0xE2, 0x20, 0x63, 0x2, 0x2, 0x0, 0x20, 0x23, 0x23, 0x20, 0x83, 0x23, 0x2, 0x2, 0x1, 0x38, 0xE4, 0xC2, 0x4, 0xB1, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0xC2, 0x94, 0xC3, 0x1, 0x1, 0x66, 0x1C, 0x0, 0x42, 0xA7, 0x30, 0x82, 0x0, 0x0, 0x0, 0x7, 0x30, 0x82, 0x1, 0x0, 0x1, 0x7, 0x39, 0x2, 0x2, 0x7, 0x8, 0xE7, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x0, 0x37, 0xE0, 0xA0, 0x3, 0x39, 0x0, 0x0, 0x42, 0x0, 0x0, 0x37, 0xE1, 0xC2, 0x4, 0x4F, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x38, 0xA3, 0xC2, 0x4, 0x87, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x64, 0x1A, 0x0, 0x41, 0xE5, 0x38, 0xC2, 0x0, 0x5, 0x30, 0x82, 0x2, 0x0, 0x1, 0x5, 0x30, 0xA6, 0x1, 0x1, 0x8, 0xA6, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x37, 0xE0, 0xA0, 0x3, 0x30, 0x0, 0x0, 0x42, 0x0, 0x0, 0x37, 0xE1, 0x30, 0xE2, 0x41, 0xA3, 0x30, 0x82, 0x1, 0x1, 0x0, 0x3, 0x38, 0x82, 0x1, 0x3, 0x30, 0x82, 0x1, 0x0, 0x2, 0x3, 0x30, 0x82, 0x2, 0x0, 0x3, 0x3, 0x30, 0xA4, 0x1, 0x1, 0x8, 0x64, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x37, 0xE0, 0xA0, 0x9, 0x50, 0x0, 0x0, 0x42, 0x0, 0x0, 0x37, 0xE1, 0xA0, 0x3, 0x45, 0x0, 0x0, 0x42, 0x0, 0x0, 0x37, 0xE2, 0x20, 0x63, 0x2, 0x2, 0x1, 0x20, 0x23, 0x23, 0x20, 0x83, 0x23, 0x2, 0x2, 0x0, 0x38, 0xE4, 0xC2, 0x4, 0xB1, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0, 0xC2, 0x94, 0xC3, 0x1, 0x0, 0x66, 0x1C, 0x0, 0x42, 0xA7, 0x30, 0x82, 0x0, 0x0, 0x0, 0x7, 0x30, 0x82, 0x1, 0x1, 0x1, 0x7, 0x39, 0x2, 0x2, 0x7, 0x8, 0xE7, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x0, };


char *tuple_names[] = {"terminate", "colocated", "proved", "edge", "____egde", "potential", "__fact5", "belief", "newBelief", "cavity", "edgeVal", };

#include "extern_functions.h"
Register (*extern_functs[])() = {(Register (*)())&sumLists, (Register (*)())&normalizeList, (Register (*)())&minusLists, (Register (*)())&convolve, (Register (*)())&damp, (Register (*)())&nodeID};

int extern_functs_args[] = {2, 1, 2, 1, 2, 1};



/*
PROCESS terminate:
RETURN


PROCESS colocated:
RETURN


PROCESS proved:
RETURN


PROCESS edge:
MOVE tuple TO reg 0
MOVE reverse[0.1] TO reg 2
MOVE host_id TO reg 1
ALLOC ____egde TO reg 3
MOVE reg 1 TO 3.0
MOVE reg 2 TO 3.1
MOVE 0.1 TO reg 4
SEND reg 3 TO reg 4 IN 0ms
MOVE tuple TO reg 0
ITERATE OVER edgeVal MATCHING 
  (match).0=0.0
MOVE tuple TO reg 1
SET reg 2 TO 1.1 INT_PLUS 1
MOVE reg 2 TO reg 3
SET reg 4 TO 1.1 INT LESS THAN OR EQUAL 0
IF (4) THEN
ALLOC belief TO reg 5
MOVE reg 3 TO 5.0
MOVE 1.2 TO 5.1
MOVE 0.1 TO reg 6
SEND reg 5 TO reg 6 IN 0ms
ENDIF
NEXT
MOVE tuple TO reg 0
ITERATE OVER edgeVal MATCHING 
  (match).0=0.0
MOVE tuple TO reg 1
MOVE host_id TO reg 2
ALLOC __fact5 TO reg 3
MOVE 0.1 TO 3.0
MOVE reg 2 TO 3.1
MOVE 1.1 TO 3.2
MOVE 1.2 TO 3.3
MOVE 0.1 TO reg 4
SEND reg 3 TO reg 4 IN 0ms
NEXT
MOVE tuple TO reg 0
ITERATE OVER edgeVal MATCHING 
  (match).0=0.0
MOVE tuple TO reg 1
ITERATE OVER cavity MATCHING 
  (match).0=0.0
MOVE tuple TO reg 2
CALL 3 3 = (2.2)
CALL 1 3 = (reg 3)
CALL 4 3 = (reg 3, 1.2)
MOVE reg 3 TO reg 4
SET reg 5 TO 2.1 INT_MINUS 1
SET reg 6 TO 1.1 INT EQUAL reg 5
IF (6) THEN
ALLOC edgeVal TO reg 7
MOVE 0.0 TO 7.0
MOVE 2.1 TO 7.1
MOVE reg 4 TO 7.2
SEND reg 7 TO reg 7 IN 0ms
ENDIF
NEXT
NEXT
RETURN


PROCESS ____egde:
RETURN


PROCESS potential:
MOVE tuple TO reg 0
ITERATE OVER belief MATCHING 
MOVE tuple TO reg 1
CALL 0 2 = (1.1, 0.0)
CALL 1 2 = (reg 2)
MOVE reg 2 TO reg 3
ALLOC newBelief TO reg 4
MOVE 1.0 TO 4.0
MOVE reg 3 TO 4.1
SEND reg 4 TO reg 4 IN 0ms
NEXT
RETURN


PROCESS __fact5:
MOVE tuple TO reg 0
ITERATE OVER newBelief MATCHING 
MOVE tuple TO reg 1
MOVE reverse[0.0] TO reg 6
CALL 2 2 = (1.1, 0.3)
CALL 1 2 = (reg 2)
MOVE reg 2 TO reg 3
SET reg 4 TO 1.0 INT_MINUS 1
SET reg 5 TO 0.2 INT EQUAL reg 4
IF (5) THEN
ALLOC cavity TO reg 7
MOVE 0.1 TO 7.0
MOVE 1.0 TO 7.1
MOVE reg 3 TO 7.2
SEND reg 7 TO reg 7 IN 0ms
ENDIF
NEXT
RETURN


PROCESS belief (sum_list_float 1) :
MOVE tuple TO reg 0
ITERATE OVER potential MATCHING 
MOVE tuple TO reg 1
CALL 0 2 = (0.1, 1.0)
CALL 1 2 = (reg 2)
MOVE reg 2 TO reg 3
ALLOC newBelief TO reg 4
MOVE 0.0 TO 4.0
MOVE reg 3 TO 4.1
SEND reg 4 TO reg 4 IN 0ms
NEXT
RETURN


PROCESS newBelief:
MOVE tuple TO reg 0
ITERATE OVER __fact5 MATCHING 
MOVE tuple TO reg 1
MOVE reverse[1.0] TO reg 6
CALL 2 2 = (0.1, 1.3)
CALL 1 2 = (reg 2)
MOVE reg 2 TO reg 3
SET reg 4 TO 0.0 INT_MINUS 1
SET reg 5 TO 1.2 INT EQUAL reg 4
IF (5) THEN
ALLOC cavity TO reg 7
MOVE 1.1 TO 7.0
MOVE 0.0 TO 7.1
MOVE reg 3 TO 7.2
SEND reg 7 TO reg 7 IN 0ms
ENDIF
NEXT
RETURN


PROCESS cavity:
MOVE tuple TO reg 0
ITERATE OVER edgeVal MATCHING 
  (match).0=0.0
MOVE tuple TO reg 1
ITERATE OVER edge MATCHING 
  (match).0=0.0
MOVE tuple TO reg 2
CALL 3 3 = (0.2)
CALL 1 3 = (reg 3)
CALL 4 3 = (reg 3, 1.2)
MOVE reg 3 TO reg 4
SET reg 5 TO 0.1 INT_MINUS 1
SET reg 6 TO 1.1 INT EQUAL reg 5
IF (6) THEN
ALLOC edgeVal TO reg 7
MOVE 0.0 TO 7.0
MOVE 0.1 TO 7.1
MOVE reg 4 TO 7.2
SEND reg 7 TO reg 7 IN 0ms
ENDIF
NEXT
NEXT
RETURN


PROCESS edgeVal:
MOVE tuple TO reg 0
ITERATE OVER edge MATCHING 
  (match).0=0.0
MOVE tuple TO reg 1
SET reg 2 TO 0.1 INT_PLUS 1
MOVE reg 2 TO reg 3
SET reg 4 TO 0.1 INT LESS THAN OR EQUAL 0
IF (4) THEN
ALLOC belief TO reg 5
MOVE reg 3 TO 5.0
MOVE 0.2 TO 5.1
MOVE 1.1 TO reg 6
SEND reg 5 TO reg 6 IN 0ms
ENDIF
NEXT
MOVE tuple TO reg 0
ITERATE OVER edge MATCHING 
  (match).0=0.0
MOVE tuple TO reg 1
MOVE host_id TO reg 2
ALLOC __fact5 TO reg 3
MOVE 1.1 TO 3.0
MOVE reg 2 TO 3.1
MOVE 0.1 TO 3.2
MOVE 0.2 TO 3.3
MOVE 1.1 TO reg 4
SEND reg 3 TO reg 4 IN 0ms
NEXT
MOVE tuple TO reg 0
ITERATE OVER cavity MATCHING 
  (match).0=0.0
MOVE tuple TO reg 1
ITERATE OVER edge MATCHING 
  (match).0=0.0
MOVE tuple TO reg 2
CALL 3 3 = (1.2)
CALL 1 3 = (reg 3)
CALL 4 3 = (reg 3, 0.2)
MOVE reg 3 TO reg 4
SET reg 5 TO 1.1 INT_MINUS 1
SET reg 6 TO 0.1 INT EQUAL reg 5
IF (6) THEN
ALLOC edgeVal TO reg 7
MOVE 0.0 TO 7.0
MOVE 1.1 TO 7.1
MOVE reg 4 TO 7.2
SEND reg 7 TO reg 7 IN 0ms
ENDIF
NEXT
NEXT
RETURN


*/

