const unsigned char meld_prog[] = {0xC, 0xD, 0x14, 0x1B, 0x23, 0x2C, 0x35, 0x3E, 0x45, 0x4C, 0x56, 0x5E, 0x65, 0x6D, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x6E, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x6F, 0x0, 0x2, 0x0, 0x3, 0x1, 0x0, 0x2, 0x70, 0x0, 0x0, 0x0, 0x4, 0x2, 0x0, 0x8, 0x0, 0x71, 0x0, 0x22, 0x0, 0x5, 0x2, 0x0, 0x2, 0x5, 0x2, 0x1, 0x22, 0x0, 0x6, 0x2, 0x0, 0x2, 0x5, 0x3, 0x1, 0x0, 0x0, 0x7, 0x0, 0x0, 0x26, 0x1, 0x0, 0x0, 0x8, 0x0, 0x0, 0x45, 0x1, 0x0, 0x0, 0x9, 0x3, 0x0, 0x5, 0x2, 0x0, 0x64, 0x1, 0x0, 0x0, 0xA, 0x1, 0x0, 0x0, 0x70, 0x1, 0x0, 0x0, 0xB, 0x0, 0x0, 0x71, 0x1, 0x1, 0x40, 0xC, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x37, 0xE0, 0x31, 0x22, 0x1, 0x0, 0x30, 0xE1, 0x41, 0x63, 0x38, 0x42, 0x0, 0x3, 0x38, 0x82, 0x1, 0x3, 0x30, 0xA4, 0x1, 0x0, 0x8, 0x64, 0x1, 0x0, 0x0, 0x0, 0x0, 0x37, 0xE0, 0xA0, 0x6, 0x20, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0x30, 0x62, 0x1, 0x0, 0x0, 0x0, 0x42, 0xE3, 0x38, 0x82, 0x0, 0x3, 0x30, 0xA4, 0x1, 0x0, 0x8, 0x64, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x37, 0xE0, 0xA0, 0xB, 0x25, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0xC2, 0x4, 0x4F, 0x0, 0x1, 0x1, 0x0, 0x0, 0x0, 0x38, 0xA2, 0x42, 0xE3, 0x38, 0x82, 0x0, 0x3, 0x30, 0xA4, 0x1, 0x0, 0x8, 0x64, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x37, 0xE0, 0xA0, 0xB, 0x28, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0x30, 0xE2, 0x42, 0x23, 0x30, 0x82, 0x1, 0x0, 0x0, 0x3, 0x38, 0x82, 0x1, 0x3, 0x30, 0x82, 0x0, 0x1, 0x2, 0x3, 0x30, 0xA4, 0x1, 0x0, 0x8, 0x64, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x37, 0xE0, 0xA0, 0x4, 0x20, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0x30, 0x62, 0x1, 0x0, 0x0, 0x0, 0x42, 0xE3, 0x38, 0x82, 0x0, 0x3, 0x30, 0xA4, 0x1, 0x1, 0x8, 0x64, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x37, 0xE0, 0xA0, 0x8, 0x1C, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0x31, 0x22, 0x0, 0x1, 0x42, 0x63, 0x30, 0x82, 0x2, 0x1, 0x0, 0x3, 0x8, 0x63, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x37, 0xE0, 0xA0, 0x7, 0x1C, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0x31, 0x22, 0x0, 0x0, 0x42, 0x63, 0x30, 0x82, 0x2, 0x0, 0x0, 0x3, 0x8, 0x63, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x37, 0xE0, 0x42, 0xA1, 0x8, 0x21, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x37, 0xE0, 0xA0, 0x4, 0x25, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0xC2, 0x4, 0x4F, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x38, 0xA2, 0x42, 0xE3, 0x38, 0x82, 0x0, 0x3, 0x30, 0xA4, 0x1, 0x1, 0x8, 0x64, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x37, 0xE0, 0xA0, 0x4, 0x28, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0x30, 0xE2, 0x42, 0x23, 0x30, 0x82, 0x1, 0x1, 0x0, 0x3, 0x38, 0x82, 0x1, 0x3, 0x30, 0x82, 0x0, 0x0, 0x2, 0x3, 0x30, 0xA4, 0x1, 0x1, 0x8, 0x64, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, };


char *tuple_names[] = {"terminate", "terminated", "colocated", "proved", "edge", "____egde", "start", "end", "__fact1", "success", "terminate_all", "connects", };

#include "extern_functions.h"
Register (*extern_functs[])() = {};

int extern_functs_args[] = {};



/*
PROCESS terminate:
RETURN


PROCESS terminated:
RETURN


PROCESS colocated:
RETURN


PROCESS proved:
RETURN


PROCESS edge:
MOVE tuple TO reg 0
MOVE reverse[0.1] TO reg 2
MOVE host_id TO reg 1
ALLOC ____egde TO reg 3
MOVE reg 1 TO 3.0
MOVE reg 2 TO 3.1
MOVE 0.1 TO reg 4
SEND reg 3 TO reg 4 IN 0ms
MOVE tuple TO reg 0
ITERATE OVER start MATCHING 
MOVE tuple TO reg 1
MOVE 1 TO reg 2
ALLOC connects TO reg 3
MOVE reg 2 TO 3.0
MOVE 0.1 TO reg 4
SEND reg 3 TO reg 4 IN 0ms
NEXT
MOVE tuple TO reg 0
ITERATE OVER connects MATCHING 
MOVE tuple TO reg 1
SET reg 2 TO 1.0 INT_PLUS 1
MOVE reg 2 TO reg 2
ALLOC connects TO reg 3
MOVE reg 2 TO 3.0
MOVE 0.1 TO reg 4
SEND reg 3 TO reg 4 IN 0ms
NEXT
MOVE tuple TO reg 0
ITERATE OVER connects MATCHING 
MOVE tuple TO reg 1
MOVE host_id TO reg 2
ALLOC __fact1 TO reg 3
MOVE 0.1 TO 3.0
MOVE reg 2 TO 3.1
MOVE 1.0 TO 3.2
MOVE 0.1 TO reg 4
SEND reg 3 TO reg 4 IN 0ms
NEXT
RETURN


PROCESS ____egde:
RETURN


PROCESS start:
MOVE tuple TO reg 0
ITERATE OVER edge MATCHING 
MOVE tuple TO reg 1
MOVE 1 TO reg 2
ALLOC connects TO reg 3
MOVE reg 2 TO 3.0
MOVE 1.1 TO reg 4
SEND reg 3 TO reg 4 IN 0ms
NEXT
RETURN


PROCESS end:
MOVE tuple TO reg 0
ITERATE OVER __fact1 MATCHING 
MOVE tuple TO reg 1
MOVE reverse[1.0] TO reg 2
ALLOC success TO reg 3
MOVE 1.2 TO 3.0
SEND reg 3 TO reg 3 IN 0ms
NEXT
RETURN


PROCESS __fact1:
MOVE tuple TO reg 0
ITERATE OVER end MATCHING 
MOVE tuple TO reg 1
MOVE reverse[0.0] TO reg 2
ALLOC success TO reg 3
MOVE 0.2 TO 3.0
SEND reg 3 TO reg 3 IN 0ms
NEXT
RETURN


PROCESS success:
MOVE tuple TO reg 0
ALLOC terminate_all TO reg 1
SEND reg 1 TO reg 1 IN 0ms
RETURN


PROCESS terminate_all:
RETURN


PROCESS connects (sum 0) :
MOVE tuple TO reg 0
ITERATE OVER edge MATCHING 
MOVE tuple TO reg 1
SET reg 2 TO 0.0 INT_PLUS 1
MOVE reg 2 TO reg 2
ALLOC connects TO reg 3
MOVE reg 2 TO 3.0
MOVE 1.1 TO reg 4
SEND reg 3 TO reg 4 IN 0ms
NEXT
MOVE tuple TO reg 0
ITERATE OVER edge MATCHING 
MOVE tuple TO reg 1
MOVE host_id TO reg 2
ALLOC __fact1 TO reg 3
MOVE 1.1 TO 3.0
MOVE reg 2 TO 3.1
MOVE 0.0 TO 3.2
MOVE 1.1 TO reg 4
SEND reg 3 TO reg 4 IN 0ms
NEXT
RETURN


*/

