const unsigned char meld_prog[] = {0xA, 0xB, 0x12, 0x1A, 0x22, 0x2B, 0x34, 0x3C, 0x43, 0x4A, 0x53, 0x5A, 0x0, 0x4, 0x0, 0x1, 0x0, 0x0, 0x72, 0x0, 0x4, 0x0, 0x2, 0x1, 0x0, 0x0, 0x96, 0x0, 0x2, 0x0, 0x3, 0x1, 0x0, 0x2, 0x97, 0x0, 0x2, 0x0, 0x4, 0x2, 0x0, 0x2, 0x5, 0xB5, 0x0, 0x2, 0x0, 0x5, 0x2, 0x0, 0x2, 0x5, 0xB6, 0x0, 0x0, 0x0, 0x6, 0x1, 0x0, 0x0, 0xC2, 0x0, 0x0, 0x0, 0x7, 0x0, 0x0, 0x15, 0x1, 0x0, 0x0, 0x8, 0x0, 0x0, 0x2A, 0x1, 0x10, 0x0, 0x9, 0x2, 0x0, 0x8, 0x0, 0x2B, 0x1, 0x0, 0x0, 0xA, 0x0, 0x0, 0x37, 0xE0, 0x30, 0x61, 0x0, 0x0, 0x0, 0x0, 0x40, 0x62, 0x38, 0x42, 0x0, 0x2, 0x8, 0x42, 0x1, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x37, 0xE0, 0x30, 0x61, 0x2, 0x0, 0x0, 0x0, 0xC2, 0x4, 0x43, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x62, 0x12, 0x0, 0x41, 0x63, 0x38, 0x42, 0x0, 0x3, 0x8, 0x63, 0x1, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x37, 0xE0, 0x30, 0xE2, 0x30, 0xA1, 0x1, 0x0, 0x41, 0x23, 0x38, 0x82, 0x0, 0x3, 0x38, 0x42, 0x1, 0x3, 0x30, 0xA4, 0x1, 0x0, 0x8, 0x64, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x37, 0xE0, 0x41, 0xA1, 0x8, 0x21, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x37, 0xE0, 0x30, 0x62, 0x7, 0x0, 0x0, 0x0, 0x30, 0x61, 0xFF, 0xFF, 0xFF, 0xFF, 0x42, 0x23, 0x38, 0x82, 0x0, 0x3, 0x38, 0x42, 0x1, 0x3, 0x8, 0x63, 0x1, 0x0, 0x0, 0x0, 0x0, 0x37, 0xE0, 0xA0, 0x7, 0x12, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0x42, 0x62, 0x8, 0x42, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x37, 0xE0, 0x30, 0x62, 0x7, 0x0, 0x0, 0x0, 0x30, 0x61, 0x3, 0x0, 0x0, 0x0, 0x42, 0x23, 0x38, 0x82, 0x0, 0x3, 0x38, 0x42, 0x1, 0x3, 0x8, 0x63, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x37, 0xE0, 0xA0, 0x6, 0x12, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0x42, 0x62, 0x8, 0x42, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, };


char *tuple_names[] = {"_init", "__init", "colocated", "edge", "____egde", "fact1", "fact2", "resend", "schedule", "fact3", };

#include "extern_functions.h"
Register (*extern_functs[])() = {};

int extern_functs_args[] = {};



/*
PROCESS _init:
MOVE tuple TO reg 0
MOVE 0 TO reg 1
ALLOC __init TO reg 2
MOVE reg 1 TO 2.0
SEND reg 2 TO reg 2 IN 0ms
REMOVE reg 0
RETURN
RETURN


PROCESS __init:
MOVE tuple TO reg 0
MOVE 2 TO reg 1
SET reg 2 TO 0.0 INT EQUAL 0
IF (2) THEN
ALLOC fact1 TO reg 3
MOVE reg 1 TO 3.0
SEND reg 3 TO reg 3 IN 0ms
REMOVE reg 0
RETURN
ENDIF
RETURN


PROCESS colocated:
RETURN


PROCESS edge:
MOVE tuple TO reg 0
MOVE host_id TO reg 2
MOVE 0.1 TO reg 1
ALLOC ____egde TO reg 3
MOVE reg 2 TO 3.0
MOVE reg 1 TO 3.1
MOVE 0.1 TO reg 4
SEND reg 3 TO reg 4 IN 0ms
RETURN


PROCESS ____egde:
RETURN


PROCESS fact1:
MOVE tuple TO reg 0
ALLOC fact2 TO reg 1
SEND reg 1 TO reg 1 IN 0ms
RETURN


PROCESS fact2:
MOVE tuple TO reg 0
MOVE type[resend] TO reg 2
MOVE ~1 TO reg 1
ALLOC schedule TO reg 3
MOVE reg 2 TO 3.0
MOVE reg 1 TO 3.1
SEND reg 3 TO reg 3 IN 0ms
MOVE tuple TO reg 0
ITERATE OVER resend MATCHING 
MOVE tuple TO reg 1
ALLOC fact3 TO reg 2
SEND reg 2 TO reg 2 IN 0ms
NEXT
MOVE tuple TO reg 0
MOVE type[resend] TO reg 2
MOVE 3 TO reg 1
ALLOC schedule TO reg 3
MOVE reg 2 TO 3.0
MOVE reg 1 TO 3.1
SEND reg 3 TO reg 3 IN 0ms
RETURN


PROCESS resend:
MOVE tuple TO reg 0
ITERATE OVER fact2 MATCHING 
MOVE tuple TO reg 1
ALLOC fact3 TO reg 2
SEND reg 2 TO reg 2 IN 0ms
NEXT
RETURN


PROCESS schedule:
RETURN


PROCESS fact3:
RETURN


*/

