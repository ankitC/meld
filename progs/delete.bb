const unsigned char meld_prog[] = {0x8, 0x9, 0x10, 0x19, 0x24, 0x2F, 0x36, 0x3D, 0x44, 0x4D, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x78, 0x0, 0x4, 0x4, 0x0, 0x1, 0x0, 0x4, 0x0, 0xAB, 0x0, 0x8, 0x2, 0x0, 0x2, 0x0, 0x24, 0x0, 0x54, 0x4, 0xC9, 0x0, 0x8, 0x2, 0x0, 0x2, 0x0, 0x24, 0x0, 0x54, 0x4, 0xCA, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xF4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x13, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x14, 0x1, 0x4, 0x8, 0x0, 0x1, 0x0, 0x84, 0x0, 0x37, 0xE0, 0x30, 0x62, 0x0, 0x0, 0x0, 0x0, 0x30, 0x61, 0x1, 0x0, 0x0, 0x0, 0x40, 0x63, 0x38, 0x82, 0x0, 0x3, 0x8, 0x63, 0x1, 0x0, 0x0, 0x0, 0x0, 0x40, 0x63, 0x38, 0x42, 0x0, 0x3, 0x8, 0x63, 0x1, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x37, 0xE0, 0xC2, 0x4, 0x23, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x61, 0xE, 0x0, 0x41, 0x22, 0x8, 0x42, 0x1, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0x37, 0xE0, 0xC2, 0x4, 0x23, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x61, 0xE, 0x0, 0x41, 0x62, 0x8, 0x42, 0x1, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x37, 0xE0, 0x30, 0xE2, 0x30, 0xA1, 0x1, 0x0, 0x40, 0xE3, 0x38, 0x82, 0x0, 0x3, 0x38, 0x42, 0x1, 0x3, 0x30, 0xA4, 0x1, 0x0, 0x8, 0x64, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x37, 0xE0, 0xA0, 0x5, 0x1C, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0x30, 0x62, 0x4, 0x0, 0x0, 0x0, 0x41, 0xE3, 0x38, 0x82, 0x0, 0x3, 0x8, 0x63, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x37, 0xE0, 0x41, 0xA1, 0x8, 0x21, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x37, 0xE0, 0xA0, 0x4, 0x1C, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0x30, 0x62, 0x4, 0x0, 0x0, 0x0, 0x41, 0xE3, 0x38, 0x82, 0x0, 0x3, 0x8, 0x63, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, };


char *tuple_names[] = {"_init", "__init", "edge", "____egde", "factA", "factB", "factC", "delete", };

#include "extern_functions.h"
unsigned int (*extern_functs[])() = {};

int extern_functs_args[] = {};



/*
PROCESS _init:
MOVE tuple TO reg 0
MOVE 0 TO reg 2
MOVE 1 TO reg 1
ALLOC __init TO reg 3
MOVE reg 2 TO 3.0
SEND reg 3 TO reg 3 IN 0ms
ALLOC __init TO reg 3
MOVE reg 1 TO 3.0
SEND reg 3 TO reg 3 IN 0ms
REMOVE reg 0
RETURN
RETURN


PROCESS __init:
MOVE tuple TO reg 0
SET reg 1 TO 0.0 INT EQUAL 0
IF (1) THEN
ALLOC factA TO reg 2
SEND reg 2 TO reg 2 IN 0ms
REMOVE reg 0
RETURN
ENDIF
MOVE tuple TO reg 0
SET reg 1 TO 0.0 INT EQUAL 1
IF (1) THEN
ALLOC factB TO reg 2
SEND reg 2 TO reg 2 IN 0ms
REMOVE reg 0
RETURN
ENDIF
RETURN


PROCESS edge:
MOVE tuple TO reg 0
MOVE host_id TO reg 2
MOVE 0.1 TO reg 1
ALLOC ____egde TO reg 3
MOVE reg 2 TO 3.0
MOVE reg 1 TO 3.1
MOVE 0.1 TO reg 4
SEND reg 3 TO reg 4 IN 0ms
RETURN


PROCESS ____egde:
RETURN


PROCESS factA:
MOVE tuple TO reg 0
ITERATE OVER factB MATCHING 
MOVE tuple TO reg 1
MOVE type[factA] TO reg 2
ALLOC delete TO reg 3
MOVE reg 2 TO 3.0
SEND reg 3 TO reg 3 IN 0ms
NEXT
MOVE tuple TO reg 0
ALLOC factC TO reg 1
SEND reg 1 TO reg 1 IN 0ms
RETURN


PROCESS factB:
MOVE tuple TO reg 0
ITERATE OVER factA MATCHING 
MOVE tuple TO reg 1
MOVE type[factA] TO reg 2
ALLOC delete TO reg 3
MOVE reg 2 TO 3.0
SEND reg 3 TO reg 3 IN 0ms
NEXT
RETURN


PROCESS factC:
RETURN


PROCESS delete:
RETURN


*/

