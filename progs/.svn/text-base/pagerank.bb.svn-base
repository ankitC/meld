const unsigned char meld_prog[] = {0x9, 0xA, 0x11, 0x19, 0x22, 0x2B, 0x34, 0x3C, 0x44, 0x4D, 0x56, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x57, 0x0, 0x2, 0x0, 0x2, 0x1, 0x0, 0x2, 0x58, 0x0, 0x0, 0x0, 0x3, 0x2, 0x0, 0x8, 0x0, 0x59, 0x0, 0x22, 0x0, 0x4, 0x2, 0x0, 0x2, 0x5, 0xB7, 0x0, 0x22, 0x0, 0x5, 0x2, 0x0, 0x2, 0x5, 0xB8, 0x0, 0x2, 0x0, 0x6, 0x1, 0x0, 0x0, 0xE0, 0x0, 0x2, 0x0, 0x7, 0x1, 0x0, 0x0, 0x21, 0x1, 0x0, 0x0, 0x8, 0x2, 0x0, 0x0, 0x1, 0xB6, 0x1, 0x1, 0x71, 0x9, 0x2, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x37, 0xE0, 0x31, 0x22, 0x1, 0x0, 0x30, 0xE1, 0x41, 0x23, 0x38, 0x42, 0x0, 0x3, 0x38, 0x82, 0x1, 0x3, 0x30, 0xA4, 0x1, 0x0, 0x8, 0x64, 0x1, 0x0, 0x0, 0x0, 0x0, 0x37, 0xE0, 0xA0, 0x6, 0x3E, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0xA0, 0x7, 0x35, 0x0, 0x0, 0xC0, 0x37, 0xE2, 0xC2, 0x4, 0xCF, 0x0, 0x2, 0x1, 0x0, 0x0, 0x0, 0x39, 0xA7, 0x20, 0x3, 0x2, 0x0, 0x1, 0xC2, 0x8C, 0x94, 0x1, 0x2, 0x39, 0x25, 0x42, 0x28, 0x39, 0xC2, 0x0, 0x8, 0x39, 0x42, 0x1, 0x8, 0x30, 0xA9, 0x1, 0x0, 0x9, 0x9, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x0, 0x0, 0x37, 0xE0, 0x30, 0x64, 0x0, 0x0, 0x0, 0x0, 0x20, 0x1, 0x2, 0x0, 0x0, 0xC0, 0x84, 0x54, 0x0, 0x0, 0x80, 0x3F, 0x38, 0xA3, 0x41, 0xE5, 0x39, 0x2, 0x0, 0x5, 0x38, 0xC2, 0x1, 0x5, 0x8, 0xA5, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x37, 0xE0, 0xA0, 0x7, 0x3E, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0xA0, 0x3, 0x35, 0x0, 0x0, 0xC0, 0x37, 0xE2, 0xC2, 0x4, 0xCF, 0x0, 0x1, 0x1, 0x0, 0x0, 0x0, 0x39, 0xA7, 0x20, 0x3, 0x2, 0x0, 0x0, 0xC2, 0x8C, 0x94, 0x1, 0x1, 0x39, 0x25, 0x42, 0x28, 0x39, 0xC2, 0x0, 0x8, 0x39, 0x42, 0x1, 0x8, 0x30, 0xA9, 0x1, 0x2, 0x9, 0x9, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x0, 0x37, 0xE0, 0xA0, 0x8, 0x52, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0xC0, 0x0, 0x90, 0x0, 0x0, 0x80, 0x3F, 0x9A, 0x99, 0x59, 0x3F, 0xE4, 0x8, 0xB2, 0x1, 0x1, 0xC0, 0x94, 0xCE, 0x9A, 0x99, 0x59, 0x3F, 0x39, 0xA7, 0xC2, 0x4, 0x51, 0x0, 0x1, 0x1, 0x0, 0x0, 0x0, 0xC2, 0x88, 0x63, 0x0, 0x0, 0x63, 0x22, 0x0, 0xC2, 0x5, 0x7, 0x0, 0x1, 0x4, 0x0, 0x0, 0x0, 0x68, 0x16, 0x0, 0x41, 0xE9, 0x30, 0x82, 0x0, 0x1, 0x0, 0x9, 0x39, 0xC2, 0x1, 0x9, 0x9, 0x29, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x37, 0xE0, 0xA0, 0x6, 0x3E, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0xA0, 0x3, 0x35, 0x0, 0x0, 0xC0, 0x37, 0xE2, 0xC2, 0x4, 0xCF, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x39, 0xA7, 0x20, 0x3, 0x2, 0x0, 0x1, 0xC2, 0x8C, 0x94, 0x1, 0x0, 0x39, 0x25, 0x42, 0x28, 0x39, 0xC2, 0x0, 0x8, 0x39, 0x42, 0x1, 0x8, 0x30, 0xA9, 0x1, 0x2, 0x9, 0x9, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x0, 0x37, 0xE0, 0xA0, 0x7, 0x52, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0xC0, 0x0, 0x90, 0x0, 0x0, 0x80, 0x3F, 0x9A, 0x99, 0x59, 0x3F, 0xE4, 0x8, 0xB2, 0x1, 0x0, 0xC0, 0x94, 0xCE, 0x9A, 0x99, 0x59, 0x3F, 0x39, 0xA7, 0xC2, 0x4, 0x51, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xC2, 0x88, 0x63, 0x0, 0x1, 0x63, 0x22, 0x0, 0xC2, 0x5, 0x7, 0x0, 0x0, 0x4, 0x0, 0x0, 0x0, 0x68, 0x16, 0x0, 0x41, 0xE9, 0x30, 0x82, 0x0, 0x0, 0x0, 0x9, 0x39, 0xC2, 0x1, 0x9, 0x9, 0x29, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, };


char *tuple_names[] = {"terminate", "colocated", "proved", "edge", "____egde", "numPages", "numLinks", "rank", "calcRank", };

#include "extern_functions.h"
Register (*extern_functs[])() = {(Register (*)())&to_float, (Register (*)())&float_abs};

int extern_functs_args[] = {1, 1};



/*
PROCESS terminate:
RETURN


PROCESS colocated:
RETURN


PROCESS proved:
RETURN


PROCESS edge:
MOVE tuple TO reg 0
MOVE reverse[0.1] TO reg 2
MOVE host_id TO reg 1
ALLOC ____egde TO reg 3
MOVE reg 1 TO 3.0
MOVE reg 2 TO 3.1
MOVE 0.1 TO reg 4
SEND reg 3 TO reg 4 IN 0ms
MOVE tuple TO reg 0
ITERATE OVER numLinks MATCHING 
MOVE tuple TO reg 1
ITERATE OVER rank MATCHING 
MOVE tuple TO reg 2
SET reg 6 TO 2.0 INT_PLUS 1
MOVE reg 6 TO reg 7
CALL 0 3 = (1.0)
SET reg 4 TO 2.1 FLOAT_DIVIDE reg 3
MOVE reg 4 TO reg 5
ALLOC calcRank TO reg 8
MOVE reg 7 TO 8.0
MOVE reg 5 TO 8.1
MOVE 0.1 TO reg 9
SEND reg 8 TO reg 9 IN 0ms
NEXT
NEXT
RETURN


PROCESS ____egde:
RETURN


PROCESS numPages:
MOVE tuple TO reg 0
MOVE 0 TO reg 4
CALL 0 1 = (0.0)
SET reg 2 TO 1.0 FLOAT_DIVIDE reg 1
MOVE reg 2 TO reg 3
ALLOC rank TO reg 5
MOVE reg 4 TO 5.0
MOVE reg 3 TO 5.1
SEND reg 5 TO reg 5 IN 0ms
RETURN


PROCESS numLinks:
MOVE tuple TO reg 0
ITERATE OVER rank MATCHING 
MOVE tuple TO reg 1
ITERATE OVER edge MATCHING 
MOVE tuple TO reg 2
SET reg 6 TO 1.0 INT_PLUS 1
MOVE reg 6 TO reg 7
CALL 0 3 = (0.0)
SET reg 4 TO 1.1 FLOAT_DIVIDE reg 3
MOVE reg 4 TO reg 5
ALLOC calcRank TO reg 8
MOVE reg 7 TO 8.0
MOVE reg 5 TO 8.1
MOVE 2.1 TO reg 9
SEND reg 8 TO reg 9 IN 0ms
NEXT
NEXT
RETURN


PROCESS rank:
MOVE tuple TO reg 0
ITERATE OVER calcRank MATCHING 
MOVE tuple TO reg 1
SET reg 4 TO 1.0 FLOAT_MINUS 0.85
SET reg 5 TO reg 4 FLOAT_TIMES 1.1
SET reg 6 TO 0.85 FLOAT_PLUS reg 5
MOVE reg 6 TO reg 7
SET reg 2 TO 1.0 INT_MINUS 1
SET reg 3 TO 0.0 INT EQUAL reg 2
IF (3) THEN
SET reg 8 TO 1.0 INT LESS THAN OR EQUAL 4
IF (8) THEN
ALLOC rank TO reg 9
MOVE 1.0 TO 9.0
MOVE reg 7 TO 9.1
SEND reg 9 TO reg 9 IN 0ms
ENDIF
ENDIF
NEXT
MOVE tuple TO reg 0
ITERATE OVER numLinks MATCHING 
MOVE tuple TO reg 1
ITERATE OVER edge MATCHING 
MOVE tuple TO reg 2
SET reg 6 TO 0.0 INT_PLUS 1
MOVE reg 6 TO reg 7
CALL 0 3 = (1.0)
SET reg 4 TO 0.1 FLOAT_DIVIDE reg 3
MOVE reg 4 TO reg 5
ALLOC calcRank TO reg 8
MOVE reg 7 TO 8.0
MOVE reg 5 TO 8.1
MOVE 2.1 TO reg 9
SEND reg 8 TO reg 9 IN 0ms
NEXT
NEXT
RETURN


PROCESS calcRank (sum_float 1) :
MOVE tuple TO reg 0
ITERATE OVER rank MATCHING 
MOVE tuple TO reg 1
SET reg 4 TO 1.0 FLOAT_MINUS 0.85
SET reg 5 TO reg 4 FLOAT_TIMES 0.1
SET reg 6 TO 0.85 FLOAT_PLUS reg 5
MOVE reg 6 TO reg 7
SET reg 2 TO 0.0 INT_MINUS 1
SET reg 3 TO 1.0 INT EQUAL reg 2
IF (3) THEN
SET reg 8 TO 0.0 INT LESS THAN OR EQUAL 4
IF (8) THEN
ALLOC rank TO reg 9
MOVE 0.0 TO 9.0
MOVE reg 7 TO 9.1
SEND reg 9 TO reg 9 IN 0ms
ENDIF
ENDIF
NEXT
RETURN


*/

