const unsigned char meld_prog[] = {0xE, 0xF, 0x16, 0x1E, 0x27, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x81, 0x0, 0x4, 0x0, 0x1, 0x0, 0x0, 0xAC, 0x0, 0x4, 0x0, 0x2, 0x1, 0x0, 0x0, 0xF3, 0x0, 0x2, 0x0, 0x3, 0x2, 0x0, 0x2, 0x5, 0x38, 0x1, 0x2, 0x0, 0x4, 0x2, 0x0, 0x2, 0x5, 0x39, 0x1, 0x2, 0x0, 0x5, 0x1, 0x0, 0x0, 0x85, 0x1, 0x4, 0x0, 0x6, 0x1, 0x0, 0x0, 0xA5, 0x1, 0x4, 0x0, 0x7, 0x1, 0x0, 0x1, 0xA6, 0x1, 0x4, 0x0, 0x8, 0x1, 0x0, 0x1, 0xEF, 0x1, 0x4, 0x0, 0x9, 0x1, 0x0, 0x1, 0x17, 0x2, 0x4, 0x0, 0xA, 0x1, 0x0, 0x1, 0x3C, 0x2, 0x4, 0x0, 0xB, 0x1, 0x0, 0x1, 0x89, 0x2, 0x4, 0x0, 0xC, 0x1, 0x0, 0x1, 0xAE, 0x2, 0x4, 0x0, 0xD, 0x1, 0x0, 0x1, 0xD0, 0x2, 0x10, 0x0, 0xE, 0x2, 0x0, 0x8, 0x0, 0x37, 0xE0, 0x30, 0x62, 0x0, 0x0, 0x0, 0x0, 0x30, 0x61, 0x1, 0x0, 0x0, 0x0, 0x40, 0x63, 0x38, 0x82, 0x0, 0x3, 0x8, 0x63, 0x1, 0x0, 0x0, 0x0, 0x0, 0x40, 0x63, 0x38, 0x42, 0x0, 0x3, 0x8, 0x63, 0x1, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x37, 0xE0, 0x30, 0x21, 0x0, 0x0, 0x0, 0x0, 0xC2, 0x4, 0x43, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x62, 0x12, 0x0, 0x41, 0xA3, 0x38, 0x42, 0x0, 0x3, 0x8, 0x63, 0x1, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0x37, 0xE0, 0x30, 0x21, 0x0, 0x0, 0x0, 0x0, 0xC2, 0x4, 0x43, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x62, 0x12, 0x0, 0x42, 0xA3, 0x38, 0x42, 0x0, 0x3, 0x8, 0x63, 0x1, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x37, 0xE0, 0x30, 0xE2, 0x30, 0xA1, 0x1, 0x0, 0x40, 0xE3, 0x38, 0x82, 0x0, 0x3, 0x38, 0x42, 0x1, 0x3, 0x30, 0xA4, 0x1, 0x0, 0x8, 0x64, 0x1, 0x0, 0x0, 0x0, 0x0, 0x37, 0xE0, 0xA0, 0x8, 0x25, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0xA0, 0x4, 0x1C, 0x0, 0x0, 0xC0, 0x37, 0xE2, 0x42, 0x63, 0x30, 0x82, 0x0, 0x1, 0x0, 0x3, 0x30, 0xA4, 0x1, 0x0, 0x8, 0x64, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x0, 0x0, 0x37, 0xE0, 0xA0, 0x7, 0x22, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0x20, 0x2, 0x2, 0x0, 0x0, 0xC2, 0x88, 0x54, 0x0, 0x1, 0x38, 0xA2, 0x42, 0x23, 0x38, 0x82, 0x0, 0x3, 0x8, 0x63, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x37, 0xE0, 0xA0, 0x8, 0x25, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0xA0, 0x2, 0x1C, 0x0, 0x0, 0xC0, 0x37, 0xE2, 0x42, 0x63, 0x30, 0x82, 0x0, 0x1, 0x0, 0x3, 0x30, 0xA4, 0x1, 0x2, 0x8, 0x64, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x0, 0x37, 0xE0, 0x20, 0x1, 0x2, 0x0, 0x0, 0xC0, 0x84, 0x34, 0x0, 0x0, 0x80, 0x3F, 0x38, 0x61, 0x41, 0xE2, 0x38, 0x42, 0x0, 0x2, 0x8, 0x42, 0x1, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x37, 0xE0, 0xA0, 0x4, 0x22, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0x20, 0x2, 0x2, 0x0, 0x1, 0xC2, 0x88, 0x54, 0x0, 0x0, 0x38, 0xA2, 0x42, 0x23, 0x38, 0x82, 0x0, 0x3, 0x8, 0x63, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x37, 0xE0, 0xA0, 0xB, 0x22, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0xC2, 0x8, 0x50, 0x0, 0x0, 0x0, 0x1, 0x20, 0x22, 0x22, 0x38, 0xA2, 0x43, 0x23, 0x38, 0x82, 0x0, 0x3, 0x8, 0x63, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x37, 0xE0, 0xA0, 0x4, 0x25, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0xA0, 0x2, 0x1C, 0x0, 0x0, 0xC0, 0x37, 0xE2, 0x42, 0x63, 0x30, 0x82, 0x0, 0x0, 0x0, 0x3, 0x30, 0xA4, 0x1, 0x2, 0x8, 0x64, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x0, 0x37, 0xE0, 0xA0, 0xA, 0x22, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0xC2, 0x8, 0x4E, 0x0, 0x1, 0x0, 0x0, 0x38, 0xA2, 0x42, 0xA3, 0x38, 0x82, 0x0, 0x3, 0x8, 0x63, 0x1, 0x0, 0x0, 0x0, 0x0, 0x80, 0x81, 0x0, 0x1, 0x0, 0x37, 0xE0, 0xA0, 0x9, 0x22, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0xC2, 0x8, 0x4E, 0x0, 0x0, 0x0, 0x1, 0x38, 0xA2, 0x42, 0xA3, 0x38, 0x82, 0x0, 0x3, 0x8, 0x63, 0x1, 0x0, 0x0, 0x0, 0x0, 0x80, 0x81, 0x0, 0x1, 0x37, 0xE0, 0xC0, 0x0, 0x30, 0x0, 0x0, 0x80, 0x3F, 0x9A, 0x99, 0x59, 0x3F, 0xE1, 0x8, 0x32, 0x0, 0x0, 0xC0, 0x84, 0x2E, 0x9A, 0x99, 0x59, 0x3F, 0x38, 0x61, 0x42, 0xE2, 0x38, 0x42, 0x0, 0x2, 0x8, 0x42, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x37, 0xE0, 0xA0, 0x7, 0x22, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0xC2, 0x8, 0x50, 0x0, 0x1, 0x0, 0x0, 0x20, 0x22, 0x22, 0x38, 0xA2, 0x43, 0x23, 0x38, 0x82, 0x0, 0x3, 0x8, 0x63, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x37, 0xE0, 0x30, 0x62, 0x8, 0x0, 0x0, 0x0, 0x30, 0x61, 0x2, 0x0, 0x0, 0x0, 0x43, 0x63, 0x38, 0x82, 0x0, 0x3, 0x38, 0x42, 0x1, 0x3, 0x8, 0x63, 0x1, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, };


char *tuple_names[] = {"_init", "__init", "edge", "____egde", "numLinks", "numPages", "oldMessage", "rank", "outMessage", "opSum", "sumRank", "newRank", "diff", "schedule", };

#include "extern_functions.h"
Register (*extern_functs[])() = {(Register (*)())&toFloat, (Register (*)())&floatAbs};

int extern_functs_args[] = {1, 1};



/*
PROCESS _init:
MOVE tuple TO reg 0
MOVE 0 TO reg 2
MOVE 1 TO reg 1
ALLOC __init TO reg 3
MOVE reg 2 TO 3.0
SEND reg 3 TO reg 3 IN 0ms
ALLOC __init TO reg 3
MOVE reg 1 TO 3.0
SEND reg 3 TO reg 3 IN 0ms
REMOVE reg 0
RETURN
RETURN


PROCESS __init:
MOVE tuple TO reg 0
MOVE 0.0 TO reg 1
SET reg 2 TO 0.0 INT EQUAL 0
IF (2) THEN
ALLOC oldMessage TO reg 3
MOVE reg 1 TO 3.0
SEND reg 3 TO reg 3 IN 0ms
REMOVE reg 0
RETURN
ENDIF
MOVE tuple TO reg 0
MOVE 0.0 TO reg 1
SET reg 2 TO 0.0 INT EQUAL 1
IF (2) THEN
ALLOC sumRank TO reg 3
MOVE reg 1 TO 3.0
SEND reg 3 TO reg 3 IN 0ms
REMOVE reg 0
RETURN
ENDIF
RETURN


PROCESS edge:
MOVE tuple TO reg 0
MOVE host_id TO reg 2
MOVE 0.1 TO reg 1
ALLOC ____egde TO reg 3
MOVE reg 2 TO 3.0
MOVE reg 1 TO 3.1
MOVE 0.1 TO reg 4
SEND reg 3 TO reg 4 IN 0ms
MOVE tuple TO reg 0
ITERATE OVER outMessage MATCHING 
MOVE tuple TO reg 1
ITERATE OVER numLinks MATCHING 
MOVE tuple TO reg 2
ALLOC opSum TO reg 3
MOVE 1.0 TO 3.0
MOVE 0.1 TO reg 4
SEND reg 3 TO reg 4 IN 0ms
NEXT
NEXT
RETURN


PROCESS ____egde:
RETURN


PROCESS numLinks:
MOVE tuple TO reg 0
ITERATE OVER rank MATCHING 
MOVE tuple TO reg 1
CALL 0 2 = (0.0)
SET reg 2 TO 1.0 FLOAT_DIVIDE reg 2
MOVE reg 2 TO reg 2
ALLOC outMessage TO reg 3
MOVE reg 2 TO 3.0
SEND reg 3 TO reg 3 IN 0ms
NEXT
MOVE tuple TO reg 0
ITERATE OVER outMessage MATCHING 
MOVE tuple TO reg 1
ITERATE OVER edge MATCHING 
MOVE tuple TO reg 2
ALLOC opSum TO reg 3
MOVE 1.0 TO 3.0
MOVE 2.1 TO reg 4
SEND reg 3 TO reg 4 IN 0ms
NEXT
NEXT
RETURN


PROCESS numPages:
MOVE tuple TO reg 0
CALL 0 1 = (0.0)
SET reg 1 TO 1.0 FLOAT_DIVIDE reg 1
MOVE reg 1 TO reg 1
ALLOC rank TO reg 2
MOVE reg 1 TO 2.0
SEND reg 2 TO reg 2 IN 0ms
REMOVE reg 0
RETURN
RETURN


PROCESS oldMessage:
RETURN


PROCESS rank:
MOVE tuple TO reg 0
ITERATE OVER numLinks MATCHING 
MOVE tuple TO reg 1
CALL 0 2 = (1.0)
SET reg 2 TO 0.0 FLOAT_DIVIDE reg 2
MOVE reg 2 TO reg 2
ALLOC outMessage TO reg 3
MOVE reg 2 TO 3.0
SEND reg 3 TO reg 3 IN 0ms
NEXT
MOVE tuple TO reg 0
ITERATE OVER newRank MATCHING 
MOVE tuple TO reg 1
SET reg 2 TO 0.0 FLOAT_MINUS 1.0
CALL 1 2 = (reg 2)
MOVE reg 2 TO reg 2
ALLOC diff TO reg 3
MOVE reg 2 TO 3.0
SEND reg 3 TO reg 3 IN 0ms
NEXT
RETURN


PROCESS outMessage:
MOVE tuple TO reg 0
ITERATE OVER numLinks MATCHING 
MOVE tuple TO reg 1
ITERATE OVER edge MATCHING 
MOVE tuple TO reg 2
ALLOC opSum TO reg 3
MOVE 0.0 TO 3.0
MOVE 2.1 TO reg 4
SEND reg 3 TO reg 4 IN 0ms
NEXT
NEXT
RETURN


PROCESS opSum:
MOVE tuple TO reg 0
ITERATE OVER sumRank MATCHING 
MOVE tuple TO reg 1
SET reg 2 TO 1.0 FLOAT_PLUS 0.0
MOVE reg 2 TO reg 2
ALLOC sumRank TO reg 3
MOVE reg 2 TO 3.0
SEND reg 3 TO reg 3 IN 0ms
REMOVE reg 0
REMOVE reg 1
RETURN
NEXT
RETURN


PROCESS sumRank:
MOVE tuple TO reg 0
ITERATE OVER opSum MATCHING 
MOVE tuple TO reg 1
SET reg 2 TO 0.0 FLOAT_PLUS 1.0
MOVE reg 2 TO reg 2
ALLOC sumRank TO reg 3
MOVE reg 2 TO 3.0
SEND reg 3 TO reg 3 IN 0ms
REMOVE reg 0
REMOVE reg 1
RETURN
NEXT
MOVE tuple TO reg 0
SET reg 1 TO 1.0 FLOAT_MINUS 0.85
SET reg 1 TO reg 1 FLOAT_TIMES 0.0
SET reg 1 TO 0.85 FLOAT_PLUS reg 1
MOVE reg 1 TO reg 1
ALLOC newRank TO reg 2
MOVE reg 1 TO 2.0
SEND reg 2 TO reg 2 IN 0ms
RETURN


PROCESS newRank:
MOVE tuple TO reg 0
ITERATE OVER rank MATCHING 
MOVE tuple TO reg 1
SET reg 2 TO 1.0 FLOAT_MINUS 0.0
CALL 1 2 = (reg 2)
MOVE reg 2 TO reg 2
ALLOC diff TO reg 3
MOVE reg 2 TO 3.0
SEND reg 3 TO reg 3 IN 0ms
NEXT
RETURN


PROCESS diff:
MOVE tuple TO reg 0
MOVE type[outMessage] TO reg 2
MOVE 2 TO reg 1
ALLOC schedule TO reg 3
MOVE reg 2 TO 3.0
MOVE reg 1 TO 3.1
SEND reg 3 TO reg 3 IN 0ms
REMOVE reg 0
RETURN
RETURN


PROCESS schedule:
RETURN


*/

