const unsigned char meld_prog[] = {0xB, 0xC, 0x14, 0x1D, 0x26, 0x2F, 0x36, 0x3E, 0x46, 0x4D, 0x55, 0x60, 0x68, 0x0, 0x2, 0x0, 0x1, 0x1, 0x0, 0x2, 0x69, 0x0, 0x0, 0x0, 0x2, 0x2, 0x0, 0x8, 0x0, 0x8D, 0x0, 0x22, 0x0, 0x3, 0x2, 0x0, 0x2, 0x5, 0xAB, 0x0, 0x22, 0x0, 0x4, 0x2, 0x0, 0x2, 0x5, 0xE7, 0x0, 0x4, 0x0, 0x5, 0x0, 0x0, 0x37, 0x1, 0x2, 0x0, 0x6, 0x1, 0x0, 0x1, 0x87, 0x1, 0x2, 0x0, 0x7, 0x1, 0x0, 0x1, 0xC3, 0x1, 0x0, 0x0, 0x8, 0x0, 0x0, 0xC4, 0x1, 0x4, 0x0, 0x9, 0x1, 0x0, 0x1, 0x0, 0x2, 0x4, 0x0, 0xA, 0x4, 0x0, 0x5, 0x2, 0x1, 0x1, 0x50, 0x2, 0x44, 0x0, 0xB, 0x1, 0x0, 0x2, 0x0, 0x37, 0xE0, 0xC2, 0x4, 0x29, 0x1, 0x0, 0x14, 0x0, 0x0, 0x0, 0x61, 0x18, 0x0, 0xC2, 0x4, 0x43, 0x0, 0x0, 0xA, 0x0, 0x0, 0x0, 0x62, 0xC, 0x0, 0x41, 0xE3, 0x8, 0x63, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x37, 0xE0, 0x31, 0x22, 0x1, 0x0, 0x30, 0xE1, 0x40, 0xE3, 0x38, 0x42, 0x0, 0x3, 0x38, 0x82, 0x1, 0x3, 0x30, 0xA4, 0x1, 0x0, 0x8, 0x64, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x37, 0xE0, 0xA0, 0x6, 0x39, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0xA0, 0x8, 0x30, 0x0, 0x0, 0xC0, 0x37, 0xE2, 0x30, 0xE3, 0x42, 0x64, 0x30, 0x82, 0x1, 0x0, 0x0, 0x4, 0x38, 0xC2, 0x1, 0x4, 0x30, 0x82, 0x0, 0x1, 0x2, 0x4, 0x30, 0x82, 0x0, 0x2, 0x3, 0x4, 0x30, 0xA5, 0x1, 0x0, 0x8, 0x85, 0x1, 0x0, 0x0, 0x0, 0x0, 0x82, 0x0, 0x1, 0x1, 0x0, 0x37, 0xE0, 0xA0, 0x5, 0x4D, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0xA0, 0x9, 0x44, 0x0, 0x0, 0xC0, 0x37, 0xE2, 0x31, 0x27, 0x0, 0x2, 0xC2, 0x8, 0x6E, 0x3, 0x2, 0x0, 0x1, 0x38, 0xE4, 0xC2, 0x8, 0xAE, 0x3, 0x2, 0x0, 0x1, 0xE5, 0x8, 0xC6, 0x2, 0x2, 0x66, 0x22, 0x0, 0x42, 0xA8, 0x30, 0x82, 0x1, 0x2, 0x0, 0x8, 0x9, 0x8, 0x1, 0x0, 0x0, 0x0, 0x0, 0x42, 0x28, 0x39, 0x2, 0x0, 0x8, 0x9, 0x7, 0x1, 0x0, 0x0, 0x0, 0x0, 0x80, 0x82, 0x0, 0x1, 0x1, 0x0, 0x37, 0xE0, 0xA0, 0x4, 0x4D, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0xA0, 0x9, 0x44, 0x0, 0x0, 0xC0, 0x37, 0xE2, 0x31, 0x27, 0x0, 0x2, 0xC2, 0x8, 0x6E, 0x3, 0x2, 0x0, 0x0, 0x38, 0xE4, 0xC2, 0x8, 0xAE, 0x3, 0x2, 0x0, 0x0, 0xE5, 0x8, 0xC6, 0x2, 0x2, 0x66, 0x22, 0x0, 0x42, 0xA8, 0x30, 0x82, 0x1, 0x2, 0x0, 0x8, 0x9, 0x8, 0x1, 0x0, 0x0, 0x0, 0x0, 0x42, 0x28, 0x39, 0x2, 0x0, 0x8, 0x9, 0x7, 0x1, 0x0, 0x0, 0x0, 0x0, 0x81, 0x82, 0x0, 0x1, 0x1, 0x0, 0x37, 0xE0, 0xA0, 0x3, 0x39, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0xA0, 0x8, 0x30, 0x0, 0x0, 0xC0, 0x37, 0xE2, 0x30, 0xE3, 0x42, 0x64, 0x30, 0x82, 0x1, 0x1, 0x0, 0x4, 0x38, 0xC2, 0x1, 0x4, 0x30, 0x82, 0x0, 0x0, 0x2, 0x4, 0x30, 0x82, 0x0, 0x2, 0x3, 0x4, 0x30, 0xA5, 0x1, 0x1, 0x8, 0x85, 0x1, 0x0, 0x0, 0x0, 0x0, 0x82, 0x0, 0x1, 0x1, 0x0, 0x0, 0x37, 0xE0, 0xA0, 0x3, 0x39, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0xA0, 0x6, 0x30, 0x0, 0x0, 0xC0, 0x37, 0xE2, 0x30, 0xE3, 0x42, 0x64, 0x30, 0x82, 0x1, 0x1, 0x0, 0x4, 0x38, 0xC2, 0x1, 0x4, 0x30, 0x82, 0x0, 0x2, 0x2, 0x4, 0x30, 0x82, 0x0, 0x0, 0x3, 0x4, 0x30, 0xA5, 0x1, 0x1, 0x8, 0x85, 0x1, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0x1, 0x1, 0x0, 0x37, 0xE0, 0xA0, 0x5, 0x4D, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0xA0, 0x4, 0x44, 0x0, 0x0, 0xC0, 0x37, 0xE2, 0x31, 0x27, 0x0, 0x0, 0xC2, 0x8, 0x6E, 0x3, 0x0, 0x0, 0x1, 0x38, 0xE4, 0xC2, 0x8, 0xAE, 0x3, 0x0, 0x0, 0x1, 0xE5, 0x8, 0xC6, 0x2, 0x0, 0x66, 0x22, 0x0, 0x42, 0xA8, 0x30, 0x82, 0x1, 0x0, 0x0, 0x8, 0x9, 0x8, 0x1, 0x0, 0x0, 0x0, 0x0, 0x42, 0x28, 0x39, 0x2, 0x0, 0x8, 0x9, 0x7, 0x1, 0x0, 0x0, 0x0, 0x0, 0x80, 0x82, 0x0, 0x1, 0x1, 0x0, 0x0, };


char *tuple_names[] = {"colocated", "proved", "edge", "____egde", "unplugged", "sink", "source", "terminate", "load", "__fact91", "pluggedIn", };

#include "extern_functions.h"
Register (*extern_functs[])() = {};

int extern_functs_args[] = {};



/*
PROCESS colocated:
RETURN


PROCESS proved:
MOVE tuple TO reg 0
SET reg 1 TO 0.1 INT GREATER THAN 20
IF (1) THEN
SET reg 2 TO 0.0 INT EQUAL type[pluggedIn]
IF (2) THEN
ALLOC terminate TO reg 3
SEND reg 3 TO reg 3 IN 0ms
ENDIF
ENDIF
RETURN


PROCESS edge:
MOVE tuple TO reg 0
MOVE reverse[0.1] TO reg 2
MOVE host_id TO reg 1
ALLOC ____egde TO reg 3
MOVE reg 1 TO 3.0
MOVE reg 2 TO 3.1
MOVE 0.1 TO reg 4
SEND reg 3 TO reg 4 IN 0ms
RETURN


PROCESS ____egde:
MOVE tuple TO reg 0
ITERATE OVER source MATCHING 
MOVE tuple TO reg 1
ITERATE OVER load MATCHING 
MOVE tuple TO reg 2
MOVE host_id TO reg 3
ALLOC __fact91 TO reg 4
MOVE 0.1 TO 4.0
MOVE reg 3 TO 4.1
MOVE 1.0 TO 4.2
MOVE 2.0 TO 4.3
MOVE 0.1 TO reg 5
SEND reg 4 TO reg 5 IN 0ms
REMOVE reg 2
RETURN
NEXT
NEXT
RETURN


PROCESS unplugged:
MOVE tuple TO reg 0
ITERATE OVER sink MATCHING 
MOVE tuple TO reg 1
ITERATE OVER __fact91 MATCHING 
MOVE tuple TO reg 2
MOVE reverse[2.0] TO reg 7
SET reg 3 TO 2.3 FLOAT_PLUS 1.0
MOVE reg 3 TO reg 4
SET reg 5 TO 2.3 FLOAT_PLUS 1.0
SET reg 6 TO reg 5 FLOAT LESS THAN OR EQUAL 2.2
IF (6) THEN
ALLOC pluggedIn TO reg 8
MOVE 2.1 TO 8.0
SEND reg 8 TO reg 8 IN 0ms
ALLOC load TO reg 8
MOVE reg 4 TO 8.0
SEND reg 8 TO reg 7 IN 0ms
REMOVE reg 0
REMOVE reg 2
RETURN
ENDIF
NEXT
NEXT
RETURN


PROCESS sink:
MOVE tuple TO reg 0
ITERATE OVER unplugged MATCHING 
MOVE tuple TO reg 1
ITERATE OVER __fact91 MATCHING 
MOVE tuple TO reg 2
MOVE reverse[2.0] TO reg 7
SET reg 3 TO 2.3 FLOAT_PLUS 0.0
MOVE reg 3 TO reg 4
SET reg 5 TO 2.3 FLOAT_PLUS 0.0
SET reg 6 TO reg 5 FLOAT LESS THAN OR EQUAL 2.2
IF (6) THEN
ALLOC pluggedIn TO reg 8
MOVE 2.1 TO 8.0
SEND reg 8 TO reg 8 IN 0ms
ALLOC load TO reg 8
MOVE reg 4 TO 8.0
SEND reg 8 TO reg 7 IN 0ms
REMOVE reg 1
REMOVE reg 2
RETURN
ENDIF
NEXT
NEXT
RETURN


PROCESS source:
MOVE tuple TO reg 0
ITERATE OVER ____egde MATCHING 
MOVE tuple TO reg 1
ITERATE OVER load MATCHING 
MOVE tuple TO reg 2
MOVE host_id TO reg 3
ALLOC __fact91 TO reg 4
MOVE 1.1 TO 4.0
MOVE reg 3 TO 4.1
MOVE 0.0 TO 4.2
MOVE 2.0 TO 4.3
MOVE 1.1 TO reg 5
SEND reg 4 TO reg 5 IN 0ms
REMOVE reg 2
RETURN
NEXT
NEXT
RETURN


PROCESS terminate:
RETURN


PROCESS load:
MOVE tuple TO reg 0
ITERATE OVER ____egde MATCHING 
MOVE tuple TO reg 1
ITERATE OVER source MATCHING 
MOVE tuple TO reg 2
MOVE host_id TO reg 3
ALLOC __fact91 TO reg 4
MOVE 1.1 TO 4.0
MOVE reg 3 TO 4.1
MOVE 2.0 TO 4.2
MOVE 0.0 TO 4.3
MOVE 1.1 TO reg 5
SEND reg 4 TO reg 5 IN 0ms
REMOVE reg 0
RETURN
NEXT
NEXT
RETURN


PROCESS __fact91:
MOVE tuple TO reg 0
ITERATE OVER sink MATCHING 
MOVE tuple TO reg 1
ITERATE OVER unplugged MATCHING 
MOVE tuple TO reg 2
MOVE reverse[0.0] TO reg 7
SET reg 3 TO 0.3 FLOAT_PLUS 1.0
MOVE reg 3 TO reg 4
SET reg 5 TO 0.3 FLOAT_PLUS 1.0
SET reg 6 TO reg 5 FLOAT LESS THAN OR EQUAL 0.2
IF (6) THEN
ALLOC pluggedIn TO reg 8
MOVE 0.1 TO 8.0
SEND reg 8 TO reg 8 IN 0ms
ALLOC load TO reg 8
MOVE reg 4 TO 8.0
SEND reg 8 TO reg 7 IN 0ms
REMOVE reg 0
REMOVE reg 2
RETURN
ENDIF
NEXT
NEXT
RETURN


PROCESS pluggedIn:
RETURN


*/

