const unsigned char meld_prog[] = {0xA, 0xB, 0x12, 0x1A, 0x23, 0x2C, 0x35, 0x3E, 0x45, 0x4C, 0x55, 0x5E, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x5F, 0x0, 0x2, 0x0, 0x2, 0x1, 0x0, 0x2, 0x60, 0x0, 0x0, 0x0, 0x3, 0x2, 0x0, 0x8, 0x0, 0x61, 0x0, 0x22, 0x0, 0x4, 0x2, 0x0, 0x2, 0x5, 0xEC, 0x0, 0x22, 0x0, 0x5, 0x2, 0x0, 0x2, 0x5, 0xED, 0x0, 0x2, 0x0, 0x6, 0x2, 0x0, 0x2, 0x0, 0x5B, 0x1, 0x2, 0x0, 0x7, 0x0, 0x0, 0x8D, 0x1, 0x2, 0x0, 0x8, 0x0, 0x0, 0xAE, 0x1, 0x0, 0x0, 0x9, 0x2, 0x0, 0x0, 0x5, 0xAF, 0x1, 0x1, 0x30, 0xA, 0x2, 0x0, 0x0, 0x5, 0x0, 0x0, 0x0, 0x37, 0xE0, 0x31, 0x22, 0x1, 0x0, 0x30, 0xE1, 0x41, 0x23, 0x38, 0x42, 0x0, 0x3, 0x38, 0x82, 0x1, 0x3, 0x30, 0xA4, 0x1, 0x0, 0x8, 0x64, 0x1, 0x0, 0x0, 0x0, 0x0, 0x37, 0xE0, 0xA0, 0x5, 0x2F, 0x0, 0x0, 0x42, 0x0, 0x0, 0x37, 0xE1, 0xA0, 0x6, 0x24, 0x0, 0x0, 0xC0, 0x37, 0xE2, 0x20, 0x3, 0x38, 0xE4, 0x42, 0x65, 0x30, 0x82, 0x1, 0x1, 0x0, 0x5, 0x39, 0x2, 0x1, 0x5, 0x30, 0xA6, 0x1, 0x0, 0x8, 0xA6, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x37, 0xE0, 0xA0, 0x5, 0x3A, 0x0, 0x0, 0x42, 0x0, 0x0, 0x37, 0xE1, 0xA0, 0x9, 0x2F, 0x0, 0x0, 0xC0, 0x37, 0xE2, 0xC2, 0x8, 0xAF, 0x0, 0x2, 0x1, 0x1, 0x39, 0x66, 0x20, 0x23, 0x2, 0x1, 0x2, 0x3, 0x38, 0xE4, 0x42, 0x67, 0x39, 0x82, 0x0, 0x7, 0x39, 0x2, 0x1, 0x7, 0x30, 0xA8, 0x1, 0x0, 0x8, 0xE8, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x0, 0x0, 0x37, 0xE0, 0xA0, 0x6, 0x2F, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0xA0, 0x3, 0x26, 0x0, 0x0, 0x42, 0x0, 0x0, 0x37, 0xE2, 0x20, 0x3, 0x38, 0xE4, 0x42, 0x65, 0x30, 0x82, 0x1, 0x0, 0x0, 0x5, 0x39, 0x2, 0x1, 0x5, 0x30, 0xA6, 0x1, 0x2, 0x8, 0xA6, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x37, 0xE0, 0xA0, 0x9, 0x3A, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0xA0, 0x3, 0x31, 0x0, 0x0, 0x42, 0x0, 0x0, 0x37, 0xE2, 0xC2, 0x8, 0xAF, 0x0, 0x1, 0x1, 0x0, 0x39, 0x66, 0x20, 0x23, 0x2, 0x1, 0x1, 0x3, 0x38, 0xE4, 0x42, 0x67, 0x39, 0x82, 0x0, 0x7, 0x39, 0x2, 0x1, 0x7, 0x30, 0xA8, 0x1, 0x2, 0x8, 0xE8, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x0, 0x37, 0xE0, 0xA0, 0x5, 0x2F, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0xA0, 0x3, 0x26, 0x0, 0x0, 0x42, 0x0, 0x1, 0x37, 0xE2, 0x20, 0x3, 0x38, 0xE4, 0x42, 0x65, 0x30, 0x82, 0x1, 0x1, 0x0, 0x5, 0x39, 0x2, 0x1, 0x5, 0x30, 0xA6, 0x1, 0x2, 0x8, 0xA6, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x0, 0x37, 0xE0, 0xA0, 0x9, 0x1E, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0x42, 0x22, 0x30, 0x82, 0x0, 0x1, 0x0, 0x2, 0x30, 0x82, 0x1, 0x1, 0x1, 0x2, 0x8, 0x42, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x37, 0xE0, 0xA0, 0x5, 0x3A, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0xA0, 0x3, 0x31, 0x0, 0x0, 0x42, 0x0, 0x1, 0x37, 0xE2, 0xC2, 0x8, 0xAF, 0x0, 0x0, 0x1, 0x1, 0x39, 0x66, 0x20, 0x23, 0x2, 0x1, 0x0, 0x3, 0x38, 0xE4, 0x42, 0x67, 0x39, 0x82, 0x0, 0x7, 0x39, 0x2, 0x1, 0x7, 0x30, 0xA8, 0x1, 0x2, 0x8, 0xE8, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x1, 0x37, 0xE0, 0xA0, 0x7, 0x1E, 0x0, 0x0, 0xC0, 0x37, 0xE1, 0x42, 0x22, 0x30, 0x82, 0x0, 0x0, 0x0, 0x2, 0x30, 0x82, 0x1, 0x0, 0x1, 0x2, 0x8, 0x42, 0x1, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, };


char *tuple_names[] = {"terminate", "colocated", "proved", "edge", "____egde", "weight", "start", "end", "print_path", "path", };

#include "extern_functions.h"
Register (*extern_functs[])() = {(Register (*)())&list_node_new, (Register (*)())&list_push_tail_node};

int extern_functs_args[] = {0, 2};



/*
PROCESS terminate:
RETURN


PROCESS colocated:
RETURN


PROCESS proved:
RETURN


PROCESS edge:
MOVE tuple TO reg 0
MOVE reverse[0.1] TO reg 2
MOVE host_id TO reg 1
ALLOC ____egde TO reg 3
MOVE reg 1 TO 3.0
MOVE reg 2 TO 3.1
MOVE 0.1 TO reg 4
SEND reg 3 TO reg 4 IN 0ms
MOVE tuple TO reg 0
ITERATE OVER weight MATCHING 
  (match).0=0.0
MOVE tuple TO reg 1
ITERATE OVER start MATCHING 
MOVE tuple TO reg 2
CALL 0 3 = ()
MOVE reg 3 TO reg 4
ALLOC path TO reg 5
MOVE 1.1 TO 5.0
MOVE reg 4 TO 5.1
MOVE 0.1 TO reg 6
SEND reg 5 TO reg 6 IN 0ms
NEXT
NEXT
MOVE tuple TO reg 0
ITERATE OVER weight MATCHING 
  (match).0=0.0
MOVE tuple TO reg 1
ITERATE OVER path MATCHING 
MOVE tuple TO reg 2
SET reg 5 TO 2.0 INT_PLUS 1.1
MOVE reg 5 TO reg 6
CALL 1 3 = (2.1, host_id)
MOVE reg 3 TO reg 4
ALLOC path TO reg 7
MOVE reg 6 TO 7.0
MOVE reg 4 TO 7.1
MOVE 0.1 TO reg 8
SEND reg 7 TO reg 8 IN 0ms
NEXT
NEXT
RETURN


PROCESS ____egde:
RETURN


PROCESS weight:
MOVE tuple TO reg 0
ITERATE OVER start MATCHING 
MOVE tuple TO reg 1
ITERATE OVER edge MATCHING 
  (match).0=0.0
MOVE tuple TO reg 2
CALL 0 3 = ()
MOVE reg 3 TO reg 4
ALLOC path TO reg 5
MOVE 0.1 TO 5.0
MOVE reg 4 TO 5.1
MOVE 2.1 TO reg 6
SEND reg 5 TO reg 6 IN 0ms
NEXT
NEXT
MOVE tuple TO reg 0
ITERATE OVER path MATCHING 
MOVE tuple TO reg 1
ITERATE OVER edge MATCHING 
  (match).0=0.0
MOVE tuple TO reg 2
SET reg 5 TO 1.0 INT_PLUS 0.1
MOVE reg 5 TO reg 6
CALL 1 3 = (1.1, host_id)
MOVE reg 3 TO reg 4
ALLOC path TO reg 7
MOVE reg 6 TO 7.0
MOVE reg 4 TO 7.1
MOVE 2.1 TO reg 8
SEND reg 7 TO reg 8 IN 0ms
NEXT
NEXT
RETURN


PROCESS start:
MOVE tuple TO reg 0
ITERATE OVER weight MATCHING 
MOVE tuple TO reg 1
ITERATE OVER edge MATCHING 
  (match).0=1.0
MOVE tuple TO reg 2
CALL 0 3 = ()
MOVE reg 3 TO reg 4
ALLOC path TO reg 5
MOVE 1.1 TO 5.0
MOVE reg 4 TO 5.1
MOVE 2.1 TO reg 6
SEND reg 5 TO reg 6 IN 0ms
NEXT
NEXT
RETURN


PROCESS end:
MOVE tuple TO reg 0
ITERATE OVER path MATCHING 
MOVE tuple TO reg 1
ALLOC print_path TO reg 2
MOVE 1.0 TO 2.0
MOVE 1.1 TO 2.1
SEND reg 2 TO reg 2 IN 0ms
NEXT
RETURN


PROCESS print_path:
RETURN


PROCESS path (min 0) :
MOVE tuple TO reg 0
ITERATE OVER weight MATCHING 
MOVE tuple TO reg 1
ITERATE OVER edge MATCHING 
  (match).0=1.0
MOVE tuple TO reg 2
SET reg 5 TO 0.0 INT_PLUS 1.1
MOVE reg 5 TO reg 6
CALL 1 3 = (0.1, host_id)
MOVE reg 3 TO reg 4
ALLOC path TO reg 7
MOVE reg 6 TO 7.0
MOVE reg 4 TO 7.1
MOVE 2.1 TO reg 8
SEND reg 7 TO reg 8 IN 0ms
NEXT
NEXT
MOVE tuple TO reg 0
ITERATE OVER end MATCHING 
MOVE tuple TO reg 1
ALLOC print_path TO reg 2
MOVE 0.0 TO 2.0
MOVE 0.1 TO 2.1
SEND reg 2 TO reg 2 IN 0ms
NEXT
RETURN


*/

