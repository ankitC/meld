const unsigned char meld_prog[] = {0xA, 0xB, 0x1A, 0x25, 0x30, 0x41, 0x4C, 0x55, 0x60, 0x6F, 0x78, 0x81, 0x0, 0x10, 0x0, 0x0, 0x4, 0x0, 0x24, 0x0, 0x24, 0x4, 0x4, 0x8, 0x54, 0xC, 0x3, 0x1, 0x8, 0x0, 0x0, 0x2, 0x0, 0x24, 0x0, 0x4, 0x4, 0x4, 0x1, 0x8, 0x0, 0x0, 0x2, 0x0, 0x24, 0x0, 0x4, 0x4, 0x5, 0x1, 0x14, 0x0, 0x0, 0x5, 0x0, 0x24, 0x0, 0x4, 0x4, 0x4, 0x8, 0x4, 0xC, 0x4, 0x10, 0x6, 0x1, 0x8, 0x0, 0x0, 0x2, 0x0, 0x24, 0x0, 0x4, 0x4, 0x7, 0x1, 0x4, 0x4, 0x0, 0x1, 0x0, 0x24, 0x0, 0x3E, 0x1, 0x8, 0x4, 0x0, 0x2, 0x0, 0x24, 0x0, 0x4, 0x4, 0xAF, 0x1, 0x10, 0x0, 0x0, 0x4, 0x0, 0x24, 0x0, 0x24, 0x4, 0x4, 0x8, 0x54, 0xC, 0xB0, 0x1, 0x4, 0x4, 0x0, 0x1, 0x0, 0x24, 0x0, 0xB1, 0x1, 0x4, 0x4, 0x0, 0x1, 0x0, 0x24, 0x0, 0x37, 0xE0, 0x30, 0xA1, 0x3, 0x0, 0x41, 0xE2, 0x30, 0x82, 0x1, 0x0, 0x0, 0x2, 0x30, 0x82, 0x0, 0x0, 0x1, 0x2, 0x30, 0x82, 0x2, 0x0, 0x2, 0x2, 0x38, 0x42, 0x3, 0x2, 0x30, 0xA3, 0x3, 0x0, 0x8, 0x43, 0x1, 0x0, 0x0, 0x0, 0x0, 0x37, 0xE0, 0xA0, 0x9, 0x56, 0x0, 0x0, 0x42, 0x0, 0x0, 0x37, 0xE1, 0x30, 0x63, 0x5, 0x0, 0x0, 0x0, 0x30, 0x62, 0x0, 0x0, 0x0, 0x0, 0x41, 0x24, 0x30, 0x82, 0x0, 0x0, 0x0, 0x4, 0x38, 0xC2, 0x1, 0x4, 0x8, 0x84, 0x1, 0xC8, 0x0, 0x0, 0x0, 0x42, 0x64, 0x30, 0x82, 0x1, 0x0, 0x0, 0x4, 0x30, 0xA5, 0x3, 0x0, 0x8, 0x85, 0x1, 0xC8, 0x0, 0x0, 0x0, 0x41, 0x24, 0x30, 0x82, 0x1, 0x0, 0x0, 0x4, 0x38, 0x82, 0x1, 0x4, 0x30, 0xA5, 0x3, 0x0, 0x8, 0x85, 0x1, 0xC8, 0x0, 0x0, 0x0, 0x81, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x37, 0xE0, 0x30, 0x62, 0x0, 0x0, 0x0, 0x0, 0x30, 0x61, 0x1, 0x0, 0x0, 0x0, 0x41, 0xA3, 0x30, 0x82, 0x0, 0x0, 0x0, 0x3, 0x38, 0x82, 0x1, 0x3, 0x8, 0x63, 0x1, 0x0, 0x0, 0x0, 0x0, 0x41, 0xA3, 0x30, 0x82, 0x0, 0x0, 0x0, 0x3, 0x38, 0x42, 0x1, 0x3, 0x8, 0x63, 0x1, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x37, 0xE0, 0x30, 0x61, 0x5, 0x0, 0x0, 0x0, 0xC2, 0x4, 0x43, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x62, 0x18, 0x0, 0x41, 0x23, 0x30, 0x82, 0x0, 0x0, 0x0, 0x3, 0x38, 0x42, 0x1, 0x3, 0x8, 0x63, 0x1, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0x37, 0xE0, 0x30, 0x61, 0x0, 0x0, 0x0, 0x0, 0x20, 0x2, 0x2, 0x0, 0x0, 0xC1, 0x88, 0x43, 0x1, 0x0, 0x0, 0x0, 0x62, 0x33, 0x0, 0xC2, 0x4, 0x63, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x63, 0x27, 0x0, 0x41, 0x24, 0x30, 0x82, 0x0, 0x0, 0x0, 0x4, 0x38, 0x42, 0x1, 0x4, 0x8, 0x84, 0x1, 0x0, 0x0, 0x0, 0x0, 0x42, 0x64, 0x30, 0x82, 0x0, 0x0, 0x0, 0x4, 0x8, 0x84, 0x1, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x37, 0xE0, 0xA0, 0x0, 0x56, 0x0, 0x0, 0x42, 0x0, 0x0, 0x37, 0xE1, 0x30, 0x63, 0x5, 0x0, 0x0, 0x0, 0x30, 0x62, 0x0, 0x0, 0x0, 0x0, 0x41, 0x24, 0x30, 0x82, 0x0, 0x0, 0x0, 0x4, 0x38, 0xC2, 0x1, 0x4, 0x8, 0x84, 0x1, 0xC8, 0x0, 0x0, 0x0, 0x42, 0x64, 0x30, 0x82, 0x1, 0x1, 0x0, 0x4, 0x30, 0xA5, 0x3, 0x1, 0x8, 0x85, 0x1, 0xC8, 0x0, 0x0, 0x0, 0x41, 0x24, 0x30, 0x82, 0x1, 0x1, 0x0, 0x4, 0x38, 0x82, 0x1, 0x4, 0x30, 0xA5, 0x3, 0x1, 0x8, 0x85, 0x1, 0xC8, 0x0, 0x0, 0x0, 0x80, 0x0, 0x1, 0x0, };


char *tuple_names[] = {"neighbor", "neighborCount", "vacant", "setColor", "setColor2", "_init", "__init", "____robhgien", "tap", "red", };

unsigned int (*extern_functs[])() = {(unsigned int (*)())&nodeID};

int extern_functs_args[] = {1};



/*
PROCESS neighbor:
MOVE tuple TO reg 0
MOVE 0.3 TO reg 1
ALLOC ____robhgien TO reg 2
MOVE 0.1 TO 2.0
MOVE 0.0 TO 2.1
MOVE 0.2 TO 2.2
MOVE reg 1 TO 2.3
MOVE 0.3 TO reg 3
SEND reg 2 TO reg 3 IN 0ms
MOVE tuple TO reg 0
ITERATE OVER red MATCHING 
  (match).0=0.0
MOVE tuple TO reg 1
MOVE 5 TO reg 3
MOVE 0 TO reg 2
ALLOC setColor2 TO reg 4
MOVE 0.0 TO 4.0
MOVE reg 3 TO 4.1
SEND reg 4 TO reg 4 IN 200ms
ALLOC red TO reg 4
MOVE 0.1 TO 4.0
MOVE 0.3 TO reg 5
SEND reg 4 TO reg 5 IN 200ms
ALLOC setColor2 TO reg 4
MOVE 0.1 TO 4.0
MOVE reg 2 TO 4.1
MOVE 0.3 TO reg 5
SEND reg 4 TO reg 5 IN 200ms
REMOVE reg 1
RETURN
NEXT
RETURN


PROCESS neighborCount:
RETURN


PROCESS vacant:
RETURN


PROCESS setColor:
RETURN


PROCESS setColor2:
RETURN


PROCESS _init:
MOVE tuple TO reg 0
MOVE 0 TO reg 2
MOVE 1 TO reg 1
ALLOC __init TO reg 3
MOVE 0.0 TO 3.0
MOVE reg 2 TO 3.1
SEND reg 3 TO reg 3 IN 0ms
ALLOC __init TO reg 3
MOVE 0.0 TO 3.0
MOVE reg 1 TO 3.1
SEND reg 3 TO reg 3 IN 0ms
REMOVE reg 0
RETURN
RETURN


PROCESS __init:
MOVE tuple TO reg 0
MOVE 5 TO reg 1
SET reg 2 TO 0.1 INT EQUAL 0
IF (2) THEN
ALLOC setColor2 TO reg 3
MOVE 0.0 TO 3.0
MOVE reg 1 TO 3.1
SEND reg 3 TO reg 3 IN 0ms
REMOVE reg 0
RETURN
ENDIF
MOVE tuple TO reg 0
MOVE 0 TO reg 1
CALL 0 2 = (0.0)
SET reg 2 TO 1 INT EQUAL reg 2
IF (2) THEN
SET reg 3 TO 0.1 INT EQUAL 1
IF (3) THEN
ALLOC setColor2 TO reg 4
MOVE 0.0 TO 4.0
MOVE reg 1 TO 4.1
SEND reg 4 TO reg 4 IN 0ms
ALLOC red TO reg 4
MOVE 0.0 TO 4.0
SEND reg 4 TO reg 4 IN 0ms
REMOVE reg 0
RETURN
ENDIF
ENDIF
RETURN


PROCESS ____robhgien:
RETURN


PROCESS tap:
RETURN


PROCESS red:
MOVE tuple TO reg 0
ITERATE OVER neighbor MATCHING 
  (match).0=0.0
MOVE tuple TO reg 1
MOVE 5 TO reg 3
MOVE 0 TO reg 2
ALLOC setColor2 TO reg 4
MOVE 0.0 TO 4.0
MOVE reg 3 TO 4.1
SEND reg 4 TO reg 4 IN 200ms
ALLOC red TO reg 4
MOVE 1.1 TO 4.0
MOVE 1.3 TO reg 5
SEND reg 4 TO reg 5 IN 200ms
ALLOC setColor2 TO reg 4
MOVE 1.1 TO 4.0
MOVE reg 2 TO 4.1
MOVE 1.3 TO reg 5
SEND reg 4 TO reg 5 IN 200ms
REMOVE reg 0
RETURN
NEXT
RETURN


*/

